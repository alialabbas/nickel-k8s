# Generates a record of ToMergable and FromMergable record for all resources in a swagger
let templates = import "template.ncl" in
let swagger = import "swagger.json" in
let get_ref
  | (String -> String)
  = fun ref =>
    let ref = std.string.split "/" ref in
    ref
    |> match {
      ["#", "definitions", ..rest] => std.array.first rest,
      ["#", "defs", ..rest] => std.array.first rest
    }
  in
let rec get_paths = fun value =>
  value
  |> std.record.to_array
  |> std.array.fold_right
    (fun e acc =>
      # we always have to expand the ref first because it's value is string but technically it references a record we want to inline in the final result
      if e.field == "$ref" then
        acc
        @ (
          std.array.map (fun p => p) (get_paths swagger.definitions."%{get_ref e.value}")
        )
      else if std.typeof e.value == 'Record
      && (std.record.has_field "x-kubernetes-list-type" e.value)
      && (e.value.x-kubernetes-list-type == "map") then
        [
          {
            field = e.field,
            value = (std.array.first e.value.x-kubernetes-list-map-keys),
            nested = (
              std.array.map
                (fun p =>
                  if e.field == "properties" || e.field == "items" then
                    p
                  else
                    { field = p.field, value = p.value, nested = [] }
                )
                (get_paths e.value)
            )
          }
        ]
        @ acc
      else if std.typeof e.value != 'Record then
        acc
      else
        acc
        @ (
          std.array.map
            (fun p =>
              if e.field == "properties" || e.field == "items" then
                p
              else
                { field = "%{e.field}." ++ p.field, value = p.value, nested = std.record.get_or "nested" [] p }
            )
            (get_paths e.value)
        )
    )
    []
in

let generated =
  swagger.definitions
  |> std.record.filter (fun e v => std.record.has_field "x-kubernetes-group-version-kind" v)
  |> std.record.filter (fun e v => !std.string.contains "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1" e)
  |> std.record.to_array
  |> std.array.fold_right
    (fun e acc =>
      let apiField =
        let groupDef = std.array.first e.value.x-kubernetes-group-version-kind in
        let group =
          if groupDef.group == "" then
            ""
          else
            groupDef.group ++ "."
        in group ++ groupDef.version ++ "." ++ groupDef.kind
      in
      let paths = get_paths e.value in
      acc
      ++ m%"%{apiField} = {
        to_merge_form = %{templates.ListToMap paths},
        from_merge_form = %{templates.MapToList paths},
      },"%
    )
    m%"# DO NOT EDIT THIS FILE MANUALLY
        # Auto Generated Contracts
let lib = import "lib.ncl" in
      {"%
in generated ++ "}"
