let crds = import "crd.yaml" in
let rec jsonSchema = (import "schema.ncl")
in
let result =
  std.typeof crds
  |> match {
    'Record => let version = std.array.first crds.spec.versions in jsonSchema.SchemaToNickel version.schema.openAPIV3Schema false,
    'Array =>
      (
        crds
        |> std.array.filter (fun e => std.typeof e == 'Record && e.kind == "CustomResourceDefinition")
        |> std.array.fold_right
          (fun e acc =>
            let group = e.spec.group in
            let kind = e.spec.names.kind in
            let versions = std.array.first e.spec.versions in
            std.array.fold_right
              (fun e acc =>
                # let field = "%{group}.%{e.name}.%{kind}" in
                # e.name is the version of the api we producing here, single crd can define multiple schemas/versions
                let field = "\"%{group}\"." ++ e.name ++ "." ++ kind in
                std.trace "evaluating api %{field}" (acc ++ "%{field} \n = %{jsonSchema.SchemaToNickel (versions.schema.openAPIV3Schema) false},\n")
              )
              acc
              e.spec.versions
          # let field = group ++ "." ++ versions.name ++ "." ++ kind in
          # std.trace "evaluating api %{field}" (acc ++ "%{field} \n = %{jsonSchema.SchemaToNickel (versions.schema.openAPIV3Schema)},\n")
          )
          m%"# DO NOT EDIT THIS FILE MANUALLY
        # Auto Generated Contracts
let lib = import "lib.ncl" in
      {"%
      )
      ++ "}"
  }
in result
