# DO NOT EDIT THIS FILE MANUALLY
# Auto Generated Contracts
let lib = import "lib.ncl" in
{
  telemetry.istio.io.v1alpha1.telemetries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        tracing
          | (
            Array {
              useRequestIdForTraceSampling
                | Bool
                | optional,
              randomSamplingPercentage
                | std.contract.all_of [ Number, lib.numbers.InRange 0 false 100 false ]
                | optional,
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              "match"
                | {
                  mode
                    | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                    | optional,
                  ..
                }
                | optional,
              disableSpanReporting
                | Bool
                | optional,
              customTags
                | {
                  _ | (
                    std.contract.all_of [
                      {
                        literal
                          | {
                            value
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            ..
                          }
                          | optional,
                        header
                          | {
                            name
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            defaultValue
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        environment
                          | {
                            name
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            defaultValue
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      },
                      (
                        lib.contracts.OneOf [
                          lib.records.JsonObject
                            {
                              header = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          lib.records.JsonObject
                            {
                              environment = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          lib.records.JsonObject
                            {
                              literal = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          (
                            std.contract.not (
                              std.contract.any_of [
                                lib.records.JsonObject
                                  {
                                    header = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    environment = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    literal = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                              ]
                            )
                          ),
                        ]
                      )
                    ]
                  )
                }
                | optional,
              ..
            }
          )
          | optional,
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        targetRef
          | {
            namespace
              | String
              | optional,
            name
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
            kind
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
            group
              | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
              | optional,
            ..
          }
          | optional,
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        metrics
          | (
            Array {
              reportingInterval
                | String
                | optional,
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              overrides
                | (
                  Array {
                    tagOverrides
                      | {
                        _ | {
                          value
                            | String
                            | optional,
                          operation
                            | lib.enum.StringOrEnum [| '"REMOVE", '"UPSERT", |]
                            | optional,
                          ..
                        }
                      }
                      | optional,
                    "match"
                      | (
                        std.contract.all_of [
                          {
                            mode
                              | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                              | optional,
                            metric
                              | lib.enum.StringOrEnum [| '"GRPC_RESPONSE_MESSAGES", '"GRPC_REQUEST_MESSAGES", '"TCP_RECEIVED_BYTES", '"TCP_SENT_BYTES", '"TCP_CLOSED_CONNECTIONS", '"TCP_OPENED_CONNECTIONS", '"RESPONSE_SIZE", '"REQUEST_SIZE", '"REQUEST_DURATION", '"REQUEST_COUNT", '"ALL_METRICS", |]
                              | optional,
                            customMetric
                              | std.contract.all_of [ String, lib.strings.MinLength 1]
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  customMetric = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  metric = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        customMetric = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        metric = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    disabled
                      | Bool
                      | optional,
                    ..
                  }
                )
                | optional,
              ..
            }
          )
          | optional,
        accessLogging
          | (
            Array {
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              "match"
                | {
                  mode
                    | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                    | optional,
                  ..
                }
                | optional,
              filter
                | {
                  expression
                    | String
                    | optional,
                  ..
                }
                | optional,
              disabled
                | Bool
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  telemetry.istio.io.v1.telemetries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        tracing
          | (
            Array {
              useRequestIdForTraceSampling
                | Bool
                | optional,
              randomSamplingPercentage
                | std.contract.all_of [ Number, lib.numbers.InRange 0 false 100 false ]
                | optional,
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              "match"
                | {
                  mode
                    | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                    | optional,
                  ..
                }
                | optional,
              disableSpanReporting
                | Bool
                | optional,
              customTags
                | {
                  _ | (
                    std.contract.all_of [
                      {
                        literal
                          | {
                            value
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            ..
                          }
                          | optional,
                        header
                          | {
                            name
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            defaultValue
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        environment
                          | {
                            name
                              | std.contract.all_of [ String, lib.strings.MinLength 1],
                            defaultValue
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      },
                      (
                        lib.contracts.OneOf [
                          lib.records.JsonObject
                            {
                              header = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          lib.records.JsonObject
                            {
                              environment = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          lib.records.JsonObject
                            {
                              literal = { contract = Dyn, optional = false, },
                            }
                            {}
                            true,
                          (
                            std.contract.not (
                              std.contract.any_of [
                                lib.records.JsonObject
                                  {
                                    header = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    environment = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    literal = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                              ]
                            )
                          ),
                        ]
                      )
                    ]
                  )
                }
                | optional,
              ..
            }
          )
          | optional,
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        targetRef
          | {
            namespace
              | String
              | optional,
            name
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
            kind
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
            group
              | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
              | optional,
            ..
          }
          | optional,
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        metrics
          | (
            Array {
              reportingInterval
                | String
                | optional,
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              overrides
                | (
                  Array {
                    tagOverrides
                      | {
                        _ | {
                          value
                            | String
                            | optional,
                          operation
                            | lib.enum.StringOrEnum [| '"REMOVE", '"UPSERT", |]
                            | optional,
                          ..
                        }
                      }
                      | optional,
                    "match"
                      | (
                        std.contract.all_of [
                          {
                            mode
                              | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                              | optional,
                            metric
                              | lib.enum.StringOrEnum [| '"GRPC_RESPONSE_MESSAGES", '"GRPC_REQUEST_MESSAGES", '"TCP_RECEIVED_BYTES", '"TCP_SENT_BYTES", '"TCP_CLOSED_CONNECTIONS", '"TCP_OPENED_CONNECTIONS", '"RESPONSE_SIZE", '"REQUEST_SIZE", '"REQUEST_DURATION", '"REQUEST_COUNT", '"ALL_METRICS", |]
                              | optional,
                            customMetric
                              | std.contract.all_of [ String, lib.strings.MinLength 1]
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  customMetric = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  metric = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        customMetric = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        metric = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    disabled
                      | Bool
                      | optional,
                    ..
                  }
                )
                | optional,
              ..
            }
          )
          | optional,
        accessLogging
          | (
            Array {
              providers
                | (
                  Array {
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              "match"
                | {
                  mode
                    | lib.enum.StringOrEnum [| '"SERVER", '"CLIENT", '"CLIENT_AND_SERVER", |]
                    | optional,
                  ..
                }
                | optional,
              filter
                | {
                  expression
                    | String
                    | optional,
                  ..
                }
                | optional,
              disabled
                | Bool
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  security.istio.io.v1beta1.requestauthentications = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        targetRef
          | {
            namespace
              | String
              | optional,
            name
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
            kind
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
            group
              | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
              | optional,
            ..
          }
          | optional,
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        jwtRules
          | (
            Array {
              timeout
                | String
                | optional,
              outputPayloadToHeader
                | String
                | optional,
              outputClaimToHeaders
                | (
                  Array {
                    header
                      | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.Regex "^[-_A-Za-z0-9]+$"],
                    claim
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              jwks_uri
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 2048]
                | optional,
              jwksUri
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 2048]
                | optional,
              jwks
                | String
                | optional,
              issuer
                | std.contract.all_of [ String, lib.strings.MinLength 1],
              fromParams
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              fromHeaders
                | (
                  Array {
                    prefix
                      | String
                      | optional,
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              fromCookies
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              forwardOriginalToken
                | Bool
                | optional,
              audiences
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              ..
            }
          )
          | lib.arrays.Length { max = 4096 }
          | optional,
        ..
      }
      | optional,
    ..
  },
  security.istio.io.v1.requestauthentications = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        targetRef
          | {
            namespace
              | String
              | optional,
            name
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
            kind
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
            group
              | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
              | optional,
            ..
          }
          | optional,
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        jwtRules
          | (
            Array {
              timeout
                | String
                | optional,
              outputPayloadToHeader
                | String
                | optional,
              outputClaimToHeaders
                | (
                  Array {
                    header
                      | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.Regex "^[-_A-Za-z0-9]+$"],
                    claim
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              jwks_uri
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 2048]
                | optional,
              jwksUri
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 2048]
                | optional,
              jwks
                | String
                | optional,
              issuer
                | std.contract.all_of [ String, lib.strings.MinLength 1],
              fromParams
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              fromHeaders
                | (
                  Array {
                    prefix
                      | String
                      | optional,
                    name
                      | std.contract.all_of [ String, lib.strings.MinLength 1],
                    ..
                  }
                )
                | optional,
              fromCookies
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              forwardOriginalToken
                | Bool
                | optional,
              audiences
                | (Array std.contract.all_of [ String, lib.strings.MinLength 1])
                | optional,
              ..
            }
          )
          | lib.arrays.Length { max = 4096 }
          | optional,
        ..
      }
      | optional,
    ..
  },
  security.istio.io.v1beta1.peerauthentications = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        portLevelMtls
          | {
            _ | {
              mode
                | lib.enum.StringOrEnum [| '"STRICT", '"PERMISSIVE", '"DISABLE", '"UNSET", |]
                | optional,
              ..
            }
          }
          | optional,
        mtls
          | {
            mode
              | lib.enum.StringOrEnum [| '"STRICT", '"PERMISSIVE", '"DISABLE", '"UNSET", |]
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    ..
  },
  security.istio.io.v1.peerauthentications = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        portLevelMtls
          | {
            _ | {
              mode
                | lib.enum.StringOrEnum [| '"STRICT", '"PERMISSIVE", '"DISABLE", '"UNSET", |]
                | optional,
              ..
            }
          }
          | optional,
        mtls
          | {
            mode
              | lib.enum.StringOrEnum [| '"STRICT", '"PERMISSIVE", '"DISABLE", '"UNSET", |]
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    ..
  },
  security.istio.io.v1beta1.authorizationpolicies = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | (
        std.contract.all_of [
          {
            targetRefs
              | (
                Array {
                  namespace
                    | String
                    | optional,
                  name
                    | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
                  kind
                    | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
                  group
                    | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                    | optional,
                  ..
                }
              )
              | optional,
            targetRef
              | {
                namespace
                  | String
                  | optional,
                name
                  | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
                kind
                  | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
                group
                  | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                  | optional,
                ..
              }
              | optional,
            selector
              | {
                matchLabels
                  | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
                  | optional,
                ..
              }
              | optional,
            rules
              | (
                Array {
                  when
                    | (
                      Array {
                        values
                          | (Array String)
                          | optional,
                        notValues
                          | (Array String)
                          | optional,
                        key
                          | String,
                        ..
                      }
                    )
                    | optional,
                  to
                    | (
                      Array {
                        operation
                          | {
                            ports
                              | (Array String)
                              | optional,
                            paths
                              | (Array String)
                              | optional,
                            notPorts
                              | (Array String)
                              | optional,
                            notPaths
                              | (Array String)
                              | optional,
                            notMethods
                              | (Array String)
                              | optional,
                            notHosts
                              | (Array String)
                              | optional,
                            methods
                              | (Array String)
                              | optional,
                            hosts
                              | (Array String)
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | optional,
                  from
                    | (
                      Array {
                        source
                          | {
                            requestPrincipals
                              | (Array String)
                              | optional,
                            remoteIpBlocks
                              | (Array String)
                              | optional,
                            principals
                              | (Array String)
                              | optional,
                            notRequestPrincipals
                              | (Array String)
                              | optional,
                            notRemoteIpBlocks
                              | (Array String)
                              | optional,
                            notPrincipals
                              | (Array String)
                              | optional,
                            notNamespaces
                              | (Array String)
                              | optional,
                            notIpBlocks
                              | (Array String)
                              | optional,
                            namespaces
                              | (Array String)
                              | optional,
                            ipBlocks
                              | (Array String)
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | optional,
                  ..
                }
              )
              | optional,
            provider
              | {
                name
                  | String
                  | optional,
                ..
              }
              | optional,
            action
              | lib.enum.StringOrEnum [| '"CUSTOM", '"AUDIT", '"DENY", '"ALLOW", |]
              | optional,
            ..
          },
          (
            lib.contracts.OneOf [
              lib.records.JsonObject
                {
                  provider = { contract = Dyn, optional = false, },
                }
                {}
                true,
              (
                std.contract.not (
                  std.contract.any_of [
                    lib.records.JsonObject
                      {
                        provider = { contract = Dyn, optional = false, },
                      }
                      {}
                      true,
                  ]
                )
              ),
            ]
          )
        ]
      )
      | optional,
    ..
  },
  security.istio.io.v1.authorizationpolicies = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | (
        std.contract.all_of [
          {
            targetRefs
              | (
                Array {
                  namespace
                    | String
                    | optional,
                  name
                    | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
                  kind
                    | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
                  group
                    | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                    | optional,
                  ..
                }
              )
              | optional,
            targetRef
              | {
                namespace
                  | String
                  | optional,
                name
                  | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
                kind
                  | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
                group
                  | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                  | optional,
                ..
              }
              | optional,
            selector
              | {
                matchLabels
                  | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
                  | optional,
                ..
              }
              | optional,
            rules
              | (
                Array {
                  when
                    | (
                      Array {
                        values
                          | (Array String)
                          | optional,
                        notValues
                          | (Array String)
                          | optional,
                        key
                          | String,
                        ..
                      }
                    )
                    | optional,
                  to
                    | (
                      Array {
                        operation
                          | {
                            ports
                              | (Array String)
                              | optional,
                            paths
                              | (Array String)
                              | optional,
                            notPorts
                              | (Array String)
                              | optional,
                            notPaths
                              | (Array String)
                              | optional,
                            notMethods
                              | (Array String)
                              | optional,
                            notHosts
                              | (Array String)
                              | optional,
                            methods
                              | (Array String)
                              | optional,
                            hosts
                              | (Array String)
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | optional,
                  from
                    | (
                      Array {
                        source
                          | {
                            requestPrincipals
                              | (Array String)
                              | optional,
                            remoteIpBlocks
                              | (Array String)
                              | optional,
                            principals
                              | (Array String)
                              | optional,
                            notRequestPrincipals
                              | (Array String)
                              | optional,
                            notRemoteIpBlocks
                              | (Array String)
                              | optional,
                            notPrincipals
                              | (Array String)
                              | optional,
                            notNamespaces
                              | (Array String)
                              | optional,
                            notIpBlocks
                              | (Array String)
                              | optional,
                            namespaces
                              | (Array String)
                              | optional,
                            ipBlocks
                              | (Array String)
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | optional,
                  ..
                }
              )
              | optional,
            provider
              | {
                name
                  | String
                  | optional,
                ..
              }
              | optional,
            action
              | lib.enum.StringOrEnum [| '"CUSTOM", '"AUDIT", '"DENY", '"ALLOW", |]
              | optional,
            ..
          },
          (
            lib.contracts.OneOf [
              lib.records.JsonObject
                {
                  provider = { contract = Dyn, optional = false, },
                }
                {}
                true,
              (
                std.contract.not (
                  std.contract.any_of [
                    lib.records.JsonObject
                      {
                        provider = { contract = Dyn, optional = false, },
                      }
                      {}
                      true,
                  ]
                )
              ),
            ]
          )
        ]
      )
      | optional,
    ..
  },
  networking.istio.io.v1beta1.workloadgroups = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        template
          | {
            weight
              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
              | optional,
            serviceAccount
              | std.contract.all_of [ String, lib.strings.MaxLength 253]
              | optional,
            ports
              | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
              | optional,
            network
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            locality
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            labels
              | { _ | String }
              | optional,
            address
              | std.contract.all_of [ String, lib.strings.MaxLength 256]
              | optional,
            ..
          },
        probe
          | (
            std.contract.all_of [
              {
                timeoutSeconds
                  | std.number.Integer
                  | optional,
                tcpSocket
                  | {
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                successThreshold
                  | std.number.Integer
                  | optional,
                periodSeconds
                  | std.number.Integer
                  | optional,
                initialDelaySeconds
                  | std.number.Integer
                  | optional,
                httpGet
                  | {
                    scheme
                      | String
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    path
                      | String
                      | optional,
                    httpHeaders
                      | (
                        Array {
                          value
                            | String
                            | optional,
                          name
                            | String
                            | optional,
                          ..
                        }
                      )
                      | optional,
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                failureThreshold
                  | std.number.Integer
                  | optional,
                exec
                  | {
                    command
                      | (Array String)
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
              (
                lib.contracts.OneOf [
                  lib.records.JsonObject
                    {
                      exec = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      tcpSocket = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      httpGet = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  (
                    std.contract.not (
                      std.contract.any_of [
                        lib.records.JsonObject
                          {
                            exec = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            tcpSocket = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            httpGet = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                      ]
                    )
                  ),
                ]
              )
            ]
          )
          | optional,
        metadata
          | {
            labels
              | { _ | String }
              | optional,
            annotations
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.workloadgroups = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        template
          | {
            weight
              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
              | optional,
            serviceAccount
              | std.contract.all_of [ String, lib.strings.MaxLength 253]
              | optional,
            ports
              | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
              | optional,
            network
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            locality
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            labels
              | { _ | String }
              | optional,
            address
              | std.contract.all_of [ String, lib.strings.MaxLength 256]
              | optional,
            ..
          },
        probe
          | (
            std.contract.all_of [
              {
                timeoutSeconds
                  | std.number.Integer
                  | optional,
                tcpSocket
                  | {
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                successThreshold
                  | std.number.Integer
                  | optional,
                periodSeconds
                  | std.number.Integer
                  | optional,
                initialDelaySeconds
                  | std.number.Integer
                  | optional,
                httpGet
                  | {
                    scheme
                      | String
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    path
                      | String
                      | optional,
                    httpHeaders
                      | (
                        Array {
                          value
                            | String
                            | optional,
                          name
                            | String
                            | optional,
                          ..
                        }
                      )
                      | optional,
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                failureThreshold
                  | std.number.Integer
                  | optional,
                exec
                  | {
                    command
                      | (Array String)
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
              (
                lib.contracts.OneOf [
                  lib.records.JsonObject
                    {
                      exec = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      tcpSocket = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      httpGet = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  (
                    std.contract.not (
                      std.contract.any_of [
                        lib.records.JsonObject
                          {
                            exec = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            tcpSocket = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            httpGet = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                      ]
                    )
                  ),
                ]
              )
            ]
          )
          | optional,
        metadata
          | {
            labels
              | { _ | String }
              | optional,
            annotations
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.workloadgroups = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        template
          | {
            weight
              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
              | optional,
            serviceAccount
              | std.contract.all_of [ String, lib.strings.MaxLength 253]
              | optional,
            ports
              | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
              | optional,
            network
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            locality
              | std.contract.all_of [ String, lib.strings.MaxLength 2048]
              | optional,
            labels
              | { _ | String }
              | optional,
            address
              | std.contract.all_of [ String, lib.strings.MaxLength 256]
              | optional,
            ..
          },
        probe
          | (
            std.contract.all_of [
              {
                timeoutSeconds
                  | std.number.Integer
                  | optional,
                tcpSocket
                  | {
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                successThreshold
                  | std.number.Integer
                  | optional,
                periodSeconds
                  | std.number.Integer
                  | optional,
                initialDelaySeconds
                  | std.number.Integer
                  | optional,
                httpGet
                  | {
                    scheme
                      | String
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                    path
                      | String
                      | optional,
                    httpHeaders
                      | (
                        Array {
                          value
                            | String
                            | optional,
                          name
                            | String
                            | optional,
                          ..
                        }
                      )
                      | optional,
                    host
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                failureThreshold
                  | std.number.Integer
                  | optional,
                exec
                  | {
                    command
                      | (Array String)
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
              (
                lib.contracts.OneOf [
                  lib.records.JsonObject
                    {
                      exec = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      tcpSocket = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  lib.records.JsonObject
                    {
                      httpGet = { contract = Dyn, optional = false, },
                    }
                    {}
                    true,
                  (
                    std.contract.not (
                      std.contract.any_of [
                        lib.records.JsonObject
                          {
                            exec = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            tcpSocket = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            httpGet = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                      ]
                    )
                  ),
                ]
              )
            ]
          )
          | optional,
        metadata
          | {
            labels
              | { _ | String }
              | optional,
            annotations
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.workloadentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        weight
          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
          | optional,
        serviceAccount
          | std.contract.all_of [ String, lib.strings.MaxLength 253]
          | optional,
        ports
          | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
          | optional,
        network
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        locality
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        labels
          | { _ | String }
          | optional,
        address
          | std.contract.all_of [ String, lib.strings.MaxLength 256]
          | optional,
        ..
      },
    ..
  },
  networking.istio.io.v1alpha3.workloadentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        weight
          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
          | optional,
        serviceAccount
          | std.contract.all_of [ String, lib.strings.MaxLength 253]
          | optional,
        ports
          | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
          | optional,
        network
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        locality
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        labels
          | { _ | String }
          | optional,
        address
          | std.contract.all_of [ String, lib.strings.MaxLength 256]
          | optional,
        ..
      },
    ..
  },
  networking.istio.io.v1.workloadentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        weight
          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
          | optional,
        serviceAccount
          | std.contract.all_of [ String, lib.strings.MaxLength 253]
          | optional,
        ports
          | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
          | optional,
        network
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        locality
          | std.contract.all_of [ String, lib.strings.MaxLength 2048]
          | optional,
        labels
          | { _ | String }
          | optional,
        address
          | std.contract.all_of [ String, lib.strings.MaxLength 256]
          | optional,
        ..
      },
    ..
  },
  networking.istio.io.v1beta1.virtualservices = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        tls
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    sniHosts
                      | (Array String),
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                ),
              ..
            }
          )
          | optional,
        tcp
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceSubnet
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                )
                | optional,
              ..
            }
          )
          | optional,
        http
          | (
            Array {
              timeout
                | String
                | optional,
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    headers
                      | {
                        response
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        request
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              rewrite
                | {
                  uriRegexRewrite
                    | {
                      rewrite
                        | String
                        | optional,
                      "match"
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  uri
                    | String
                    | optional,
                  authority
                    | String
                    | optional,
                  ..
                }
                | optional,
              retries
                | {
                  retryRemoteLocalities
                    | Bool
                    | optional,
                  retryOn
                    | String
                    | optional,
                  perTryTimeout
                    | String
                    | optional,
                  attempts
                    | std.number.Integer
                    | optional,
                  ..
                }
                | optional,
              redirect
                | (
                  std.contract.all_of [
                    {
                      uri
                        | String
                        | optional,
                      scheme
                        | String
                        | optional,
                      redirectCode
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      port
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      derivePort
                        | lib.enum.StringOrEnum [| '"FROM_REQUEST_PORT", '"FROM_PROTOCOL_DEFAULT", |]
                        | optional,
                      authority
                        | String
                        | optional,
                      ..
                    },
                    (
                      lib.contracts.OneOf [
                        lib.records.JsonObject
                          {
                            derivePort = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            port = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        (
                          std.contract.not (
                            std.contract.any_of [
                              lib.records.JsonObject
                                {
                                  derivePort = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  port = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                            ]
                          )
                        ),
                      ]
                    )
                  ]
                )
                | optional,
              name
                | String
                | optional,
              mirrors
                | (
                  Array {
                    percentage
                      | {
                        value
                          | Number
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              mirror_percent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirrorPercentage
                | {
                  value
                    | Number
                    | optional,
                  ..
                }
                | optional,
              mirrorPercent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirror
                | {
                  subset
                    | String
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  host
                    | String,
                  ..
                }
                | optional,
              "match"
                | (
                  Array {
                    withoutHeaders
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    uri
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    statPrefix
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    scheme
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    queryParams
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    name
                      | String
                      | optional,
                    method
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ignoreUriCase
                      | Bool
                      | optional,
                    headers
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    authority
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  }
                )
                | optional,
              headers
                | {
                  response
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  request
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              fault
                | {
                  delay
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          percent
                            | std.number.Integer
                            | optional,
                          fixedDelay
                            | String
                            | optional,
                          exponentialDelay
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                exponentialDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                fixedDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      exponentialDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      fixedDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  abort
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          httpStatus
                            | std.number.Integer
                            | optional,
                          http2Error
                            | String
                            | optional,
                          grpcStatus
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                http2Error = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                grpcStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                httpStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      http2Error = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      grpcStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              directResponse
                | {
                  status
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  body
                    | (
                      std.contract.all_of [
                        {
                          string
                            | String
                            | optional,
                          bytes
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                bytes = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                string = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      bytes = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      string = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              delegate
                | {
                  namespace
                    | String
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              corsPolicy
                | {
                  unmatchedPreflights
                    | lib.enum.StringOrEnum [| '"IGNORE", '"FORWARD", '"UNSPECIFIED", |]
                    | optional,
                  maxAge
                    | String
                    | optional,
                  exposeHeaders
                    | (Array String)
                    | optional,
                  allowOrigins
                    | (
                      Array (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                    )
                    | optional,
                  allowOrigin
                    | (Array String)
                    | optional,
                  allowMethods
                    | (Array String)
                    | optional,
                  allowHeaders
                    | (Array String)
                    | optional,
                  allowCredentials
                    | Bool
                    | optional,
                  ..
                }
                | optional,
              ..
            }
          )
          | optional,
        hosts
          | (Array String)
          | optional,
        gateways
          | (Array String)
          | optional,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.virtualservices = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        tls
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    sniHosts
                      | (Array String),
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                ),
              ..
            }
          )
          | optional,
        tcp
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceSubnet
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                )
                | optional,
              ..
            }
          )
          | optional,
        http
          | (
            Array {
              timeout
                | String
                | optional,
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    headers
                      | {
                        response
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        request
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              rewrite
                | {
                  uriRegexRewrite
                    | {
                      rewrite
                        | String
                        | optional,
                      "match"
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  uri
                    | String
                    | optional,
                  authority
                    | String
                    | optional,
                  ..
                }
                | optional,
              retries
                | {
                  retryRemoteLocalities
                    | Bool
                    | optional,
                  retryOn
                    | String
                    | optional,
                  perTryTimeout
                    | String
                    | optional,
                  attempts
                    | std.number.Integer
                    | optional,
                  ..
                }
                | optional,
              redirect
                | (
                  std.contract.all_of [
                    {
                      uri
                        | String
                        | optional,
                      scheme
                        | String
                        | optional,
                      redirectCode
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      port
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      derivePort
                        | lib.enum.StringOrEnum [| '"FROM_REQUEST_PORT", '"FROM_PROTOCOL_DEFAULT", |]
                        | optional,
                      authority
                        | String
                        | optional,
                      ..
                    },
                    (
                      lib.contracts.OneOf [
                        lib.records.JsonObject
                          {
                            derivePort = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            port = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        (
                          std.contract.not (
                            std.contract.any_of [
                              lib.records.JsonObject
                                {
                                  derivePort = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  port = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                            ]
                          )
                        ),
                      ]
                    )
                  ]
                )
                | optional,
              name
                | String
                | optional,
              mirrors
                | (
                  Array {
                    percentage
                      | {
                        value
                          | Number
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              mirror_percent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirrorPercentage
                | {
                  value
                    | Number
                    | optional,
                  ..
                }
                | optional,
              mirrorPercent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirror
                | {
                  subset
                    | String
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  host
                    | String,
                  ..
                }
                | optional,
              "match"
                | (
                  Array {
                    withoutHeaders
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    uri
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    statPrefix
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    scheme
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    queryParams
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    name
                      | String
                      | optional,
                    method
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ignoreUriCase
                      | Bool
                      | optional,
                    headers
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    authority
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  }
                )
                | optional,
              headers
                | {
                  response
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  request
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              fault
                | {
                  delay
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          percent
                            | std.number.Integer
                            | optional,
                          fixedDelay
                            | String
                            | optional,
                          exponentialDelay
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                exponentialDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                fixedDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      exponentialDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      fixedDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  abort
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          httpStatus
                            | std.number.Integer
                            | optional,
                          http2Error
                            | String
                            | optional,
                          grpcStatus
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                http2Error = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                grpcStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                httpStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      http2Error = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      grpcStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              directResponse
                | {
                  status
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  body
                    | (
                      std.contract.all_of [
                        {
                          string
                            | String
                            | optional,
                          bytes
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                bytes = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                string = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      bytes = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      string = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              delegate
                | {
                  namespace
                    | String
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              corsPolicy
                | {
                  unmatchedPreflights
                    | lib.enum.StringOrEnum [| '"IGNORE", '"FORWARD", '"UNSPECIFIED", |]
                    | optional,
                  maxAge
                    | String
                    | optional,
                  exposeHeaders
                    | (Array String)
                    | optional,
                  allowOrigins
                    | (
                      Array (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                    )
                    | optional,
                  allowOrigin
                    | (Array String)
                    | optional,
                  allowMethods
                    | (Array String)
                    | optional,
                  allowHeaders
                    | (Array String)
                    | optional,
                  allowCredentials
                    | Bool
                    | optional,
                  ..
                }
                | optional,
              ..
            }
          )
          | optional,
        hosts
          | (Array String)
          | optional,
        gateways
          | (Array String)
          | optional,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.virtualservices = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        tls
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    sniHosts
                      | (Array String),
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                ),
              ..
            }
          )
          | optional,
        tcp
          | (
            Array {
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              "match"
                | (
                  Array {
                    sourceSubnet
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    destinationSubnets
                      | (Array String)
                      | optional,
                    ..
                  }
                )
                | optional,
              ..
            }
          )
          | optional,
        http
          | (
            Array {
              timeout
                | String
                | optional,
              route
                | (
                  Array {
                    weight
                      | std.number.Integer
                      | optional,
                    headers
                      | {
                        response
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        request
                          | {
                            set
                              | { _ | String }
                              | optional,
                            remove
                              | (Array String)
                              | optional,
                            add
                              | { _ | String }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              rewrite
                | {
                  uriRegexRewrite
                    | {
                      rewrite
                        | String
                        | optional,
                      "match"
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  uri
                    | String
                    | optional,
                  authority
                    | String
                    | optional,
                  ..
                }
                | optional,
              retries
                | {
                  retryRemoteLocalities
                    | Bool
                    | optional,
                  retryOn
                    | String
                    | optional,
                  perTryTimeout
                    | String
                    | optional,
                  attempts
                    | std.number.Integer
                    | optional,
                  ..
                }
                | optional,
              redirect
                | (
                  std.contract.all_of [
                    {
                      uri
                        | String
                        | optional,
                      scheme
                        | String
                        | optional,
                      redirectCode
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      port
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      derivePort
                        | lib.enum.StringOrEnum [| '"FROM_REQUEST_PORT", '"FROM_PROTOCOL_DEFAULT", |]
                        | optional,
                      authority
                        | String
                        | optional,
                      ..
                    },
                    (
                      lib.contracts.OneOf [
                        lib.records.JsonObject
                          {
                            derivePort = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            port = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        (
                          std.contract.not (
                            std.contract.any_of [
                              lib.records.JsonObject
                                {
                                  derivePort = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  port = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                            ]
                          )
                        ),
                      ]
                    )
                  ]
                )
                | optional,
              name
                | String
                | optional,
              mirrors
                | (
                  Array {
                    percentage
                      | {
                        value
                          | Number
                          | optional,
                        ..
                      }
                      | optional,
                    destination
                      | {
                        subset
                          | String
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        host
                          | String,
                        ..
                      },
                    ..
                  }
                )
                | optional,
              mirror_percent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirrorPercentage
                | {
                  value
                    | Number
                    | optional,
                  ..
                }
                | optional,
              mirrorPercent
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              mirror
                | {
                  subset
                    | String
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  host
                    | String,
                  ..
                }
                | optional,
              "match"
                | (
                  Array {
                    withoutHeaders
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    uri
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    statPrefix
                      | String
                      | optional,
                    sourceNamespace
                      | String
                      | optional,
                    sourceLabels
                      | { _ | String }
                      | optional,
                    scheme
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    queryParams
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    port
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    name
                      | String
                      | optional,
                    method
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ignoreUriCase
                      | Bool
                      | optional,
                    headers
                      | {
                        _ | (
                          std.contract.all_of [
                            {
                              regex
                                | String
                                | optional,
                              prefix
                                | String
                                | optional,
                              exact
                                | String
                                | optional,
                              ..
                            },
                            (
                              lib.contracts.OneOf [
                                lib.records.JsonObject
                                  {
                                    regex = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    prefix = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                lib.records.JsonObject
                                  {
                                    exact = { contract = Dyn, optional = false, },
                                  }
                                  {}
                                  true,
                                (
                                  std.contract.not (
                                    std.contract.any_of [
                                      lib.records.JsonObject
                                        {
                                          regex = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          prefix = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                      lib.records.JsonObject
                                        {
                                          exact = { contract = Dyn, optional = false, },
                                        }
                                        {}
                                        true,
                                    ]
                                  )
                                ),
                              ]
                            )
                          ]
                        )
                      }
                      | optional,
                    gateways
                      | (Array String)
                      | optional,
                    authority
                      | (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  }
                )
                | optional,
              headers
                | {
                  response
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  request
                    | {
                      set
                        | { _ | String }
                        | optional,
                      remove
                        | (Array String)
                        | optional,
                      add
                        | { _ | String }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              fault
                | {
                  delay
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          percent
                            | std.number.Integer
                            | optional,
                          fixedDelay
                            | String
                            | optional,
                          exponentialDelay
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                exponentialDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                fixedDelay = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      exponentialDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      fixedDelay = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  abort
                    | (
                      std.contract.all_of [
                        {
                          percentage
                            | {
                              value
                                | Number
                                | optional,
                              ..
                            }
                            | optional,
                          httpStatus
                            | std.number.Integer
                            | optional,
                          http2Error
                            | String
                            | optional,
                          grpcStatus
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                http2Error = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                grpcStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                httpStatus = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      http2Error = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      grpcStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpStatus = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              directResponse
                | {
                  status
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  body
                    | (
                      std.contract.all_of [
                        {
                          string
                            | String
                            | optional,
                          bytes
                            | String
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                bytes = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                string = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      bytes = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      string = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  ..
                }
                | optional,
              delegate
                | {
                  namespace
                    | String
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              corsPolicy
                | {
                  unmatchedPreflights
                    | lib.enum.StringOrEnum [| '"IGNORE", '"FORWARD", '"UNSPECIFIED", |]
                    | optional,
                  maxAge
                    | String
                    | optional,
                  exposeHeaders
                    | (Array String)
                    | optional,
                  allowOrigins
                    | (
                      Array (
                        std.contract.all_of [
                          {
                            regex
                              | String
                              | optional,
                            prefix
                              | String
                              | optional,
                            exact
                              | String
                              | optional,
                            ..
                          },
                          (
                            lib.contracts.OneOf [
                              lib.records.JsonObject
                                {
                                  regex = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  prefix = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  exact = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              (
                                std.contract.not (
                                  std.contract.any_of [
                                    lib.records.JsonObject
                                      {
                                        regex = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        prefix = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                    lib.records.JsonObject
                                      {
                                        exact = { contract = Dyn, optional = false, },
                                      }
                                      {}
                                      true,
                                  ]
                                )
                              ),
                            ]
                          )
                        ]
                      )
                    )
                    | optional,
                  allowOrigin
                    | (Array String)
                    | optional,
                  allowMethods
                    | (Array String)
                    | optional,
                  allowHeaders
                    | (Array String)
                    | optional,
                  allowCredentials
                    | Bool
                    | optional,
                  ..
                }
                | optional,
              ..
            }
          )
          | optional,
        hosts
          | (Array String)
          | optional,
        gateways
          | (Array String)
          | optional,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.sidecars = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        outboundTrafficPolicy
          | {
            mode
              | lib.enum.StringOrEnum [| '"ALLOW_ANY", '"REGISTRY_ONLY", |]
              | optional,
            egressProxy
              | {
                subset
                  | String
                  | optional,
                port
                  | {
                    number
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    ..
                  }
                  | optional,
                host
                  | String,
                ..
              }
              | optional,
            ..
          }
          | optional,
        ingress
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                },
              defaultEndpoint
                | String
                | optional,
              connectionPool
                | {
                  tcp
                    | {
                      tcpKeepalive
                        | {
                          time
                            | String
                            | optional,
                          probes
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          interval
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      maxConnections
                        | std.number.Integer
                        | optional,
                      maxConnectionDuration
                        | String
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      connectTimeout
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  http
                    | {
                      useClientProtocol
                        | Bool
                        | optional,
                      maxRetries
                        | std.number.Integer
                        | optional,
                      maxRequestsPerConnection
                        | std.number.Integer
                        | optional,
                      maxConcurrentStreams
                        | std.number.Integer
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      http2MaxRequests
                        | std.number.Integer
                        | optional,
                      http1MaxPendingRequests
                        | std.number.Integer
                        | optional,
                      h2UpgradePolicy
                        | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        inboundConnectionPool
          | {
            tcp
              | {
                tcpKeepalive
                  | {
                    time
                      | String
                      | optional,
                    probes
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    interval
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                maxConnections
                  | std.number.Integer
                  | optional,
                maxConnectionDuration
                  | String
                  | optional,
                idleTimeout
                  | String
                  | optional,
                connectTimeout
                  | String
                  | optional,
                ..
              }
              | optional,
            http
              | {
                useClientProtocol
                  | Bool
                  | optional,
                maxRetries
                  | std.number.Integer
                  | optional,
                maxRequestsPerConnection
                  | std.number.Integer
                  | optional,
                maxConcurrentStreams
                  | std.number.Integer
                  | optional,
                idleTimeout
                  | String
                  | optional,
                http2MaxRequests
                  | std.number.Integer
                  | optional,
                http1MaxPendingRequests
                  | std.number.Integer
                  | optional,
                h2UpgradePolicy
                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        egress
          | (
            Array {
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              hosts
                | (Array String),
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.sidecars = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        outboundTrafficPolicy
          | {
            mode
              | lib.enum.StringOrEnum [| '"ALLOW_ANY", '"REGISTRY_ONLY", |]
              | optional,
            egressProxy
              | {
                subset
                  | String
                  | optional,
                port
                  | {
                    number
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    ..
                  }
                  | optional,
                host
                  | String,
                ..
              }
              | optional,
            ..
          }
          | optional,
        ingress
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                },
              defaultEndpoint
                | String
                | optional,
              connectionPool
                | {
                  tcp
                    | {
                      tcpKeepalive
                        | {
                          time
                            | String
                            | optional,
                          probes
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          interval
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      maxConnections
                        | std.number.Integer
                        | optional,
                      maxConnectionDuration
                        | String
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      connectTimeout
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  http
                    | {
                      useClientProtocol
                        | Bool
                        | optional,
                      maxRetries
                        | std.number.Integer
                        | optional,
                      maxRequestsPerConnection
                        | std.number.Integer
                        | optional,
                      maxConcurrentStreams
                        | std.number.Integer
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      http2MaxRequests
                        | std.number.Integer
                        | optional,
                      http1MaxPendingRequests
                        | std.number.Integer
                        | optional,
                      h2UpgradePolicy
                        | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        inboundConnectionPool
          | {
            tcp
              | {
                tcpKeepalive
                  | {
                    time
                      | String
                      | optional,
                    probes
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    interval
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                maxConnections
                  | std.number.Integer
                  | optional,
                maxConnectionDuration
                  | String
                  | optional,
                idleTimeout
                  | String
                  | optional,
                connectTimeout
                  | String
                  | optional,
                ..
              }
              | optional,
            http
              | {
                useClientProtocol
                  | Bool
                  | optional,
                maxRetries
                  | std.number.Integer
                  | optional,
                maxRequestsPerConnection
                  | std.number.Integer
                  | optional,
                maxConcurrentStreams
                  | std.number.Integer
                  | optional,
                idleTimeout
                  | String
                  | optional,
                http2MaxRequests
                  | std.number.Integer
                  | optional,
                http1MaxPendingRequests
                  | std.number.Integer
                  | optional,
                h2UpgradePolicy
                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        egress
          | (
            Array {
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              hosts
                | (Array String),
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.sidecars = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        outboundTrafficPolicy
          | {
            mode
              | lib.enum.StringOrEnum [| '"ALLOW_ANY", '"REGISTRY_ONLY", |]
              | optional,
            egressProxy
              | {
                subset
                  | String
                  | optional,
                port
                  | {
                    number
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    ..
                  }
                  | optional,
                host
                  | String,
                ..
              }
              | optional,
            ..
          }
          | optional,
        ingress
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                },
              defaultEndpoint
                | String
                | optional,
              connectionPool
                | {
                  tcp
                    | {
                      tcpKeepalive
                        | {
                          time
                            | String
                            | optional,
                          probes
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          interval
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      maxConnections
                        | std.number.Integer
                        | optional,
                      maxConnectionDuration
                        | String
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      connectTimeout
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  http
                    | {
                      useClientProtocol
                        | Bool
                        | optional,
                      maxRetries
                        | std.number.Integer
                        | optional,
                      maxRequestsPerConnection
                        | std.number.Integer
                        | optional,
                      maxConcurrentStreams
                        | std.number.Integer
                        | optional,
                      idleTimeout
                        | String
                        | optional,
                      http2MaxRequests
                        | std.number.Integer
                        | optional,
                      http1MaxPendingRequests
                        | std.number.Integer
                        | optional,
                      h2UpgradePolicy
                        | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        inboundConnectionPool
          | {
            tcp
              | {
                tcpKeepalive
                  | {
                    time
                      | String
                      | optional,
                    probes
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                      | optional,
                    interval
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                maxConnections
                  | std.number.Integer
                  | optional,
                maxConnectionDuration
                  | String
                  | optional,
                idleTimeout
                  | String
                  | optional,
                connectTimeout
                  | String
                  | optional,
                ..
              }
              | optional,
            http
              | {
                useClientProtocol
                  | Bool
                  | optional,
                maxRetries
                  | std.number.Integer
                  | optional,
                maxRequestsPerConnection
                  | std.number.Integer
                  | optional,
                maxConcurrentStreams
                  | std.number.Integer
                  | optional,
                idleTimeout
                  | String
                  | optional,
                http2MaxRequests
                  | std.number.Integer
                  | optional,
                http1MaxPendingRequests
                  | std.number.Integer
                  | optional,
                h2UpgradePolicy
                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        egress
          | (
            Array {
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String
                    | optional,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  name
                    | String
                    | optional,
                  ..
                }
                | optional,
              hosts
                | (Array String),
              captureMode
                | lib.enum.StringOrEnum [| '"NONE", '"IPTABLES", '"DEFAULT", |]
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.serviceentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        subjectAltNames
          | (Array String)
          | optional,
        resolution
          | lib.enum.StringOrEnum [| '"DNS_ROUND_ROBIN", '"DNS", '"STATIC", '"NONE", |]
          | optional,
        ports
          | (
            Array {
              targetPort
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              protocol
                | String
                | optional,
              number
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
              name
                | String,
              ..
            }
          )
          | optional,
        location
          | lib.enum.StringOrEnum [| '"MESH_INTERNAL", '"MESH_EXTERNAL", |]
          | optional,
        hosts
          | (Array String),
        exportTo
          | (Array String)
          | optional,
        endpoints
          | (
            Array {
              weight
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              serviceAccount
                | std.contract.all_of [ String, lib.strings.MaxLength 253]
                | optional,
              ports
                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                | optional,
              network
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              locality
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              labels
                | { _ | String }
                | optional,
              address
                | std.contract.all_of [ String, lib.strings.MaxLength 256]
                | optional,
              ..
            }
          )
          | lib.arrays.Length { max = 4096 }
          | optional,
        addresses
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.serviceentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        subjectAltNames
          | (Array String)
          | optional,
        resolution
          | lib.enum.StringOrEnum [| '"DNS_ROUND_ROBIN", '"DNS", '"STATIC", '"NONE", |]
          | optional,
        ports
          | (
            Array {
              targetPort
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              protocol
                | String
                | optional,
              number
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
              name
                | String,
              ..
            }
          )
          | optional,
        location
          | lib.enum.StringOrEnum [| '"MESH_INTERNAL", '"MESH_EXTERNAL", |]
          | optional,
        hosts
          | (Array String),
        exportTo
          | (Array String)
          | optional,
        endpoints
          | (
            Array {
              weight
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              serviceAccount
                | std.contract.all_of [ String, lib.strings.MaxLength 253]
                | optional,
              ports
                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                | optional,
              network
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              locality
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              labels
                | { _ | String }
                | optional,
              address
                | std.contract.all_of [ String, lib.strings.MaxLength 256]
                | optional,
              ..
            }
          )
          | lib.arrays.Length { max = 4096 }
          | optional,
        addresses
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.serviceentries = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        subjectAltNames
          | (Array String)
          | optional,
        resolution
          | lib.enum.StringOrEnum [| '"DNS_ROUND_ROBIN", '"DNS", '"STATIC", '"NONE", |]
          | optional,
        ports
          | (
            Array {
              targetPort
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              protocol
                | String
                | optional,
              number
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
              name
                | String,
              ..
            }
          )
          | optional,
        location
          | lib.enum.StringOrEnum [| '"MESH_INTERNAL", '"MESH_EXTERNAL", |]
          | optional,
        hosts
          | (Array String),
        exportTo
          | (Array String)
          | optional,
        endpoints
          | (
            Array {
              weight
                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                | optional,
              serviceAccount
                | std.contract.all_of [ String, lib.strings.MaxLength 253]
                | optional,
              ports
                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                | optional,
              network
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              locality
                | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                | optional,
              labels
                | { _ | String }
                | optional,
              address
                | std.contract.all_of [ String, lib.strings.MaxLength 256]
                | optional,
              ..
            }
          )
          | lib.arrays.Length { max = 4096 }
          | optional,
        addresses
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.proxyconfigs = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        image
          | {
            imageType
              | String
              | optional,
            ..
          }
          | optional,
        environmentVariables
          | { _ | std.contract.all_of [ String, lib.strings.MaxLength 2048] }
          | optional,
        concurrency
          | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.gateways = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        servers
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  name
                    | String,
                  ..
                },
              name
                | String
                | optional,
              hosts
                | (Array String),
              defaultEndpoint
                | String
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        selector
          | { _ | String }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.gateways = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        servers
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  name
                    | String,
                  ..
                },
              name
                | String
                | optional,
              hosts
                | (Array String),
              defaultEndpoint
                | String
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        selector
          | { _ | String }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.gateways = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        servers
          | (
            Array {
              tls
                | {
                  verifyCertificateSpki
                    | (Array String)
                    | optional,
                  verifyCertificateHash
                    | (Array String)
                    | optional,
                  subjectAltNames
                    | (Array String)
                    | optional,
                  serverCertificate
                    | String
                    | optional,
                  privateKey
                    | String
                    | optional,
                  mode
                    | lib.enum.StringOrEnum [| '"OPTIONAL_MUTUAL", '"ISTIO_MUTUAL", '"AUTO_PASSTHROUGH", '"MUTUAL", '"SIMPLE", '"PASSTHROUGH", |]
                    | optional,
                  minProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  maxProtocolVersion
                    | lib.enum.StringOrEnum [| '"TLSV1_3", '"TLSV1_2", '"TLSV1_1", '"TLSV1_0", '"TLS_AUTO", |]
                    | optional,
                  httpsRedirect
                    | Bool
                    | optional,
                  credentialName
                    | String
                    | optional,
                  cipherSuites
                    | (Array String)
                    | optional,
                  caCrl
                    | String
                    | optional,
                  caCertificates
                    | String
                    | optional,
                  ..
                }
                | optional,
              port
                | {
                  targetPort
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                    | optional,
                  protocol
                    | String,
                  number
                    | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                  name
                    | String,
                  ..
                },
              name
                | String
                | optional,
              hosts
                | (Array String),
              defaultEndpoint
                | String
                | optional,
              bind
                | String
                | optional,
              ..
            }
          )
          | optional,
        selector
          | { _ | String }
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.envoyfilters = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            labels
              | { _ | String }
              | optional,
            ..
          }
          | optional,
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        priority
          | std.number.Integer
          | optional,
        configPatches
          | (
            Array {
              patch
                | {
                  value
                    | {
                      ..
                    }
                    | optional,
                  operation
                    | lib.enum.StringOrEnum [| '"REPLACE", '"INSERT_FIRST", '"INSERT_AFTER", '"INSERT_BEFORE", '"REMOVE", '"ADD", '"MERGE", '"INVALID", |]
                    | optional,
                  filterClass
                    | lib.enum.StringOrEnum [| '"STATS", '"AUTHZ", '"AUTHN", '"UNSPECIFIED", |]
                    | optional,
                  ..
                }
                | optional,
              "match"
                | (
                  std.contract.all_of [
                    {
                      routeConfiguration
                        | {
                          vhost
                            | {
                              route
                                | {
                                  name
                                    | String
                                    | optional,
                                  action
                                    | lib.enum.StringOrEnum [| '"DIRECT_RESPONSE", '"REDIRECT", '"ROUTE", '"ANY", |]
                                    | optional,
                                  ..
                                }
                                | optional,
                              name
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          portNumber
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          portName
                            | String
                            | optional,
                          name
                            | String
                            | optional,
                          gateway
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      proxy
                        | {
                          proxyVersion
                            | String
                            | optional,
                          metadata
                            | { _ | String }
                            | optional,
                          ..
                        }
                        | optional,
                      listener
                        | {
                          portNumber
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          portName
                            | String
                            | optional,
                          name
                            | String
                            | optional,
                          listenerFilter
                            | String
                            | optional,
                          filterChain
                            | {
                              transportProtocol
                                | String
                                | optional,
                              sni
                                | String
                                | optional,
                              name
                                | String
                                | optional,
                              filter
                                | {
                                  subFilter
                                    | {
                                      name
                                        | String
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  name
                                    | String
                                    | optional,
                                  ..
                                }
                                | optional,
                              destinationPort
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              applicationProtocols
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      context
                        | lib.enum.StringOrEnum [| '"GATEWAY", '"SIDECAR_OUTBOUND", '"SIDECAR_INBOUND", '"ANY", |]
                        | optional,
                      cluster
                        | {
                          subset
                            | String
                            | optional,
                          service
                            | String
                            | optional,
                          portNumber
                            | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                            | optional,
                          name
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    },
                    (
                      lib.contracts.OneOf [
                        lib.records.JsonObject
                          {
                            cluster = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            routeConfiguration = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        lib.records.JsonObject
                          {
                            listener = { contract = Dyn, optional = false, },
                          }
                          {}
                          true,
                        (
                          std.contract.not (
                            std.contract.any_of [
                              lib.records.JsonObject
                                {
                                  cluster = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  routeConfiguration = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                              lib.records.JsonObject
                                {
                                  listener = { contract = Dyn, optional = false, },
                                }
                                {}
                                true,
                            ]
                          )
                        ),
                      ]
                    )
                  ]
                )
                | optional,
              applyTo
                | lib.enum.StringOrEnum [| '"LISTENER_FILTER", '"BOOTSTRAP", '"EXTENSION_CONFIG", '"CLUSTER", '"HTTP_ROUTE", '"VIRTUAL_HOST", '"ROUTE_CONFIGURATION", '"HTTP_FILTER", '"NETWORK_FILTER", '"FILTER_CHAIN", '"LISTENER", '"INVALID", |]
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1beta1.destinationrules = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        trafficPolicy
          | {
            tunnel
              | {
                targetPort
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                targetHost
                  | String,
                protocol
                  | String
                  | optional,
                ..
              }
              | optional,
            tls
              | {
                subjectAltNames
                  | (Array String)
                  | optional,
                sni
                  | String
                  | optional,
                privateKey
                  | String
                  | optional,
                mode
                  | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                  | optional,
                insecureSkipVerify
                  | Bool
                  | optional,
                credentialName
                  | String
                  | optional,
                clientCertificate
                  | String
                  | optional,
                caCrl
                  | String
                  | optional,
                caCertificates
                  | String
                  | optional,
                ..
              }
              | optional,
            proxyProtocol
              | {
                version
                  | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                  | optional,
                ..
              }
              | optional,
            portLevelSettings
              | (
                Array {
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
              )
              | lib.arrays.Length { max = 4096 }
              | optional,
            outlierDetection
              | {
                splitExternalLocalOriginErrors
                  | Bool
                  | optional,
                minHealthPercent
                  | std.number.Integer
                  | optional,
                maxEjectionPercent
                  | std.number.Integer
                  | optional,
                interval
                  | String
                  | optional,
                consecutiveLocalOriginFailures
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveGatewayErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveErrors
                  | std.number.Integer
                  | optional,
                consecutive5xxErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                baseEjectionTime
                  | String
                  | optional,
                ..
              }
              | optional,
            loadBalancer
              | (
                std.contract.all_of [
                  {
                    warmupDurationSecs
                      | String
                      | optional,
                    simple
                      | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                      | optional,
                    localityLbSetting
                      | {
                        failoverPriority
                          | (Array String)
                          | optional,
                        failover
                          | (
                            Array {
                              to
                                | String
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        enabled
                          | Bool
                          | optional,
                        distribute
                          | (
                            Array {
                              to
                                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        ..
                      }
                      | optional,
                    consistentHash
                      | (
                        std.contract.all_of [
                          {
                            useSourceIp
                              | Bool
                              | optional,
                            ringHash
                              | {
                                minimumRingSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            minimumRingSize
                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                              | optional,
                            maglev
                              | {
                                tableSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            httpQueryParameterName
                              | String
                              | optional,
                            httpHeaderName
                              | String
                              | optional,
                            httpCookie
                              | {
                                ttl
                                  | String
                                  | optional,
                                path
                                  | String
                                  | optional,
                                name
                                  | String,
                                ..
                              }
                              | optional,
                            ..
                          },
                          (
                            std.contract.all_of [
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      maglev = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      ringHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      httpQueryParameterName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      useSourceIp = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpCookie = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpHeaderName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  },
                  (
                    lib.contracts.OneOf [
                      lib.records.JsonObject
                        {
                          consistentHash = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      lib.records.JsonObject
                        {
                          simple = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      (
                        std.contract.not (
                          std.contract.any_of [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                          ]
                        )
                      ),
                    ]
                  )
                ]
              )
              | optional,
            connectionPool
              | {
                tcp
                  | {
                    tcpKeepalive
                      | {
                        time
                          | String
                          | optional,
                        probes
                          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                          | optional,
                        interval
                          | String
                          | optional,
                        ..
                      }
                      | optional,
                    maxConnections
                      | std.number.Integer
                      | optional,
                    maxConnectionDuration
                      | String
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    connectTimeout
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                http
                  | {
                    useClientProtocol
                      | Bool
                      | optional,
                    maxRetries
                      | std.number.Integer
                      | optional,
                    maxRequestsPerConnection
                      | std.number.Integer
                      | optional,
                    maxConcurrentStreams
                      | std.number.Integer
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    http2MaxRequests
                      | std.number.Integer
                      | optional,
                    http1MaxPendingRequests
                      | std.number.Integer
                      | optional,
                    h2UpgradePolicy
                      | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        subsets
          | (
            Array {
              trafficPolicy
                | {
                  tunnel
                    | {
                      targetPort
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                      targetHost
                        | String,
                      protocol
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  proxyProtocol
                    | {
                      version
                        | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                        | optional,
                      ..
                    }
                    | optional,
                  portLevelSettings
                    | (
                      Array {
                        tls
                          | {
                            subjectAltNames
                              | (Array String)
                              | optional,
                            sni
                              | String
                              | optional,
                            privateKey
                              | String
                              | optional,
                            mode
                              | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                              | optional,
                            insecureSkipVerify
                              | Bool
                              | optional,
                            credentialName
                              | String
                              | optional,
                            clientCertificate
                              | String
                              | optional,
                            caCrl
                              | String
                              | optional,
                            caCertificates
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        outlierDetection
                          | {
                            splitExternalLocalOriginErrors
                              | Bool
                              | optional,
                            minHealthPercent
                              | std.number.Integer
                              | optional,
                            maxEjectionPercent
                              | std.number.Integer
                              | optional,
                            interval
                              | String
                              | optional,
                            consecutiveLocalOriginFailures
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveGatewayErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveErrors
                              | std.number.Integer
                              | optional,
                            consecutive5xxErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            baseEjectionTime
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        loadBalancer
                          | (
                            std.contract.all_of [
                              {
                                warmupDurationSecs
                                  | String
                                  | optional,
                                simple
                                  | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                                  | optional,
                                localityLbSetting
                                  | {
                                    failoverPriority
                                      | (Array String)
                                      | optional,
                                    failover
                                      | (
                                        Array {
                                          to
                                            | String
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    enabled
                                      | Bool
                                      | optional,
                                    distribute
                                      | (
                                        Array {
                                          to
                                            | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                consistentHash
                                  | (
                                    std.contract.all_of [
                                      {
                                        useSourceIp
                                          | Bool
                                          | optional,
                                        ringHash
                                          | {
                                            minimumRingSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        minimumRingSize
                                          | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                          | optional,
                                        maglev
                                          | {
                                            tableSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        httpQueryParameterName
                                          | String
                                          | optional,
                                        httpHeaderName
                                          | String
                                          | optional,
                                        httpCookie
                                          | {
                                            ttl
                                              | String
                                              | optional,
                                            path
                                              | String
                                              | optional,
                                            name
                                              | String,
                                            ..
                                          }
                                          | optional,
                                        ..
                                      },
                                      (
                                        std.contract.all_of [
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        maglev = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        ringHash = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        httpQueryParameterName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        useSourceIp = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpCookie = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpHeaderName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                        ]
                                      )
                                    ]
                                  )
                                  | optional,
                                ..
                              },
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            consistentHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            simple = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              )
                            ]
                          )
                          | optional,
                        connectionPool
                          | {
                            tcp
                              | {
                                tcpKeepalive
                                  | {
                                    time
                                      | String
                                      | optional,
                                    probes
                                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                      | optional,
                                    interval
                                      | String
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                maxConnections
                                  | std.number.Integer
                                  | optional,
                                maxConnectionDuration
                                  | String
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                connectTimeout
                                  | String
                                  | optional,
                                ..
                              }
                              | optional,
                            http
                              | {
                                useClientProtocol
                                  | Bool
                                  | optional,
                                maxRetries
                                  | std.number.Integer
                                  | optional,
                                maxRequestsPerConnection
                                  | std.number.Integer
                                  | optional,
                                maxConcurrentStreams
                                  | std.number.Integer
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                http2MaxRequests
                                  | std.number.Integer
                                  | optional,
                                http1MaxPendingRequests
                                  | std.number.Integer
                                  | optional,
                                h2UpgradePolicy
                                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                                  | optional,
                                ..
                              }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | lib.arrays.Length { max = 4096 }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              name
                | String,
              labels
                | { _ | String }
                | optional,
              ..
            }
          )
          | optional,
        host
          | String,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1alpha3.destinationrules = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        trafficPolicy
          | {
            tunnel
              | {
                targetPort
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                targetHost
                  | String,
                protocol
                  | String
                  | optional,
                ..
              }
              | optional,
            tls
              | {
                subjectAltNames
                  | (Array String)
                  | optional,
                sni
                  | String
                  | optional,
                privateKey
                  | String
                  | optional,
                mode
                  | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                  | optional,
                insecureSkipVerify
                  | Bool
                  | optional,
                credentialName
                  | String
                  | optional,
                clientCertificate
                  | String
                  | optional,
                caCrl
                  | String
                  | optional,
                caCertificates
                  | String
                  | optional,
                ..
              }
              | optional,
            proxyProtocol
              | {
                version
                  | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                  | optional,
                ..
              }
              | optional,
            portLevelSettings
              | (
                Array {
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
              )
              | lib.arrays.Length { max = 4096 }
              | optional,
            outlierDetection
              | {
                splitExternalLocalOriginErrors
                  | Bool
                  | optional,
                minHealthPercent
                  | std.number.Integer
                  | optional,
                maxEjectionPercent
                  | std.number.Integer
                  | optional,
                interval
                  | String
                  | optional,
                consecutiveLocalOriginFailures
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveGatewayErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveErrors
                  | std.number.Integer
                  | optional,
                consecutive5xxErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                baseEjectionTime
                  | String
                  | optional,
                ..
              }
              | optional,
            loadBalancer
              | (
                std.contract.all_of [
                  {
                    warmupDurationSecs
                      | String
                      | optional,
                    simple
                      | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                      | optional,
                    localityLbSetting
                      | {
                        failoverPriority
                          | (Array String)
                          | optional,
                        failover
                          | (
                            Array {
                              to
                                | String
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        enabled
                          | Bool
                          | optional,
                        distribute
                          | (
                            Array {
                              to
                                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        ..
                      }
                      | optional,
                    consistentHash
                      | (
                        std.contract.all_of [
                          {
                            useSourceIp
                              | Bool
                              | optional,
                            ringHash
                              | {
                                minimumRingSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            minimumRingSize
                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                              | optional,
                            maglev
                              | {
                                tableSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            httpQueryParameterName
                              | String
                              | optional,
                            httpHeaderName
                              | String
                              | optional,
                            httpCookie
                              | {
                                ttl
                                  | String
                                  | optional,
                                path
                                  | String
                                  | optional,
                                name
                                  | String,
                                ..
                              }
                              | optional,
                            ..
                          },
                          (
                            std.contract.all_of [
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      maglev = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      ringHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      httpQueryParameterName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      useSourceIp = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpCookie = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpHeaderName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  },
                  (
                    lib.contracts.OneOf [
                      lib.records.JsonObject
                        {
                          consistentHash = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      lib.records.JsonObject
                        {
                          simple = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      (
                        std.contract.not (
                          std.contract.any_of [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                          ]
                        )
                      ),
                    ]
                  )
                ]
              )
              | optional,
            connectionPool
              | {
                tcp
                  | {
                    tcpKeepalive
                      | {
                        time
                          | String
                          | optional,
                        probes
                          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                          | optional,
                        interval
                          | String
                          | optional,
                        ..
                      }
                      | optional,
                    maxConnections
                      | std.number.Integer
                      | optional,
                    maxConnectionDuration
                      | String
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    connectTimeout
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                http
                  | {
                    useClientProtocol
                      | Bool
                      | optional,
                    maxRetries
                      | std.number.Integer
                      | optional,
                    maxRequestsPerConnection
                      | std.number.Integer
                      | optional,
                    maxConcurrentStreams
                      | std.number.Integer
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    http2MaxRequests
                      | std.number.Integer
                      | optional,
                    http1MaxPendingRequests
                      | std.number.Integer
                      | optional,
                    h2UpgradePolicy
                      | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        subsets
          | (
            Array {
              trafficPolicy
                | {
                  tunnel
                    | {
                      targetPort
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                      targetHost
                        | String,
                      protocol
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  proxyProtocol
                    | {
                      version
                        | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                        | optional,
                      ..
                    }
                    | optional,
                  portLevelSettings
                    | (
                      Array {
                        tls
                          | {
                            subjectAltNames
                              | (Array String)
                              | optional,
                            sni
                              | String
                              | optional,
                            privateKey
                              | String
                              | optional,
                            mode
                              | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                              | optional,
                            insecureSkipVerify
                              | Bool
                              | optional,
                            credentialName
                              | String
                              | optional,
                            clientCertificate
                              | String
                              | optional,
                            caCrl
                              | String
                              | optional,
                            caCertificates
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        outlierDetection
                          | {
                            splitExternalLocalOriginErrors
                              | Bool
                              | optional,
                            minHealthPercent
                              | std.number.Integer
                              | optional,
                            maxEjectionPercent
                              | std.number.Integer
                              | optional,
                            interval
                              | String
                              | optional,
                            consecutiveLocalOriginFailures
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveGatewayErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveErrors
                              | std.number.Integer
                              | optional,
                            consecutive5xxErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            baseEjectionTime
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        loadBalancer
                          | (
                            std.contract.all_of [
                              {
                                warmupDurationSecs
                                  | String
                                  | optional,
                                simple
                                  | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                                  | optional,
                                localityLbSetting
                                  | {
                                    failoverPriority
                                      | (Array String)
                                      | optional,
                                    failover
                                      | (
                                        Array {
                                          to
                                            | String
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    enabled
                                      | Bool
                                      | optional,
                                    distribute
                                      | (
                                        Array {
                                          to
                                            | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                consistentHash
                                  | (
                                    std.contract.all_of [
                                      {
                                        useSourceIp
                                          | Bool
                                          | optional,
                                        ringHash
                                          | {
                                            minimumRingSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        minimumRingSize
                                          | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                          | optional,
                                        maglev
                                          | {
                                            tableSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        httpQueryParameterName
                                          | String
                                          | optional,
                                        httpHeaderName
                                          | String
                                          | optional,
                                        httpCookie
                                          | {
                                            ttl
                                              | String
                                              | optional,
                                            path
                                              | String
                                              | optional,
                                            name
                                              | String,
                                            ..
                                          }
                                          | optional,
                                        ..
                                      },
                                      (
                                        std.contract.all_of [
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        maglev = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        ringHash = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        httpQueryParameterName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        useSourceIp = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpCookie = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpHeaderName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                        ]
                                      )
                                    ]
                                  )
                                  | optional,
                                ..
                              },
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            consistentHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            simple = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              )
                            ]
                          )
                          | optional,
                        connectionPool
                          | {
                            tcp
                              | {
                                tcpKeepalive
                                  | {
                                    time
                                      | String
                                      | optional,
                                    probes
                                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                      | optional,
                                    interval
                                      | String
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                maxConnections
                                  | std.number.Integer
                                  | optional,
                                maxConnectionDuration
                                  | String
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                connectTimeout
                                  | String
                                  | optional,
                                ..
                              }
                              | optional,
                            http
                              | {
                                useClientProtocol
                                  | Bool
                                  | optional,
                                maxRetries
                                  | std.number.Integer
                                  | optional,
                                maxRequestsPerConnection
                                  | std.number.Integer
                                  | optional,
                                maxConcurrentStreams
                                  | std.number.Integer
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                http2MaxRequests
                                  | std.number.Integer
                                  | optional,
                                http1MaxPendingRequests
                                  | std.number.Integer
                                  | optional,
                                h2UpgradePolicy
                                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                                  | optional,
                                ..
                              }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | lib.arrays.Length { max = 4096 }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              name
                | String,
              labels
                | { _ | String }
                | optional,
              ..
            }
          )
          | optional,
        host
          | String,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.istio.io.v1.destinationrules = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        workloadSelector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        trafficPolicy
          | {
            tunnel
              | {
                targetPort
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                targetHost
                  | String,
                protocol
                  | String
                  | optional,
                ..
              }
              | optional,
            tls
              | {
                subjectAltNames
                  | (Array String)
                  | optional,
                sni
                  | String
                  | optional,
                privateKey
                  | String
                  | optional,
                mode
                  | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                  | optional,
                insecureSkipVerify
                  | Bool
                  | optional,
                credentialName
                  | String
                  | optional,
                clientCertificate
                  | String
                  | optional,
                caCrl
                  | String
                  | optional,
                caCertificates
                  | String
                  | optional,
                ..
              }
              | optional,
            proxyProtocol
              | {
                version
                  | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                  | optional,
                ..
              }
              | optional,
            portLevelSettings
              | (
                Array {
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  port
                    | {
                      number
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      ..
                    }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
              )
              | lib.arrays.Length { max = 4096 }
              | optional,
            outlierDetection
              | {
                splitExternalLocalOriginErrors
                  | Bool
                  | optional,
                minHealthPercent
                  | std.number.Integer
                  | optional,
                maxEjectionPercent
                  | std.number.Integer
                  | optional,
                interval
                  | String
                  | optional,
                consecutiveLocalOriginFailures
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveGatewayErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                consecutiveErrors
                  | std.number.Integer
                  | optional,
                consecutive5xxErrors
                  | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                  | optional,
                baseEjectionTime
                  | String
                  | optional,
                ..
              }
              | optional,
            loadBalancer
              | (
                std.contract.all_of [
                  {
                    warmupDurationSecs
                      | String
                      | optional,
                    simple
                      | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                      | optional,
                    localityLbSetting
                      | {
                        failoverPriority
                          | (Array String)
                          | optional,
                        failover
                          | (
                            Array {
                              to
                                | String
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        enabled
                          | Bool
                          | optional,
                        distribute
                          | (
                            Array {
                              to
                                | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                | optional,
                              from
                                | String
                                | optional,
                              ..
                            }
                          )
                          | optional,
                        ..
                      }
                      | optional,
                    consistentHash
                      | (
                        std.contract.all_of [
                          {
                            useSourceIp
                              | Bool
                              | optional,
                            ringHash
                              | {
                                minimumRingSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            minimumRingSize
                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                              | optional,
                            maglev
                              | {
                                tableSize
                                  | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                  | optional,
                                ..
                              }
                              | optional,
                            httpQueryParameterName
                              | String
                              | optional,
                            httpHeaderName
                              | String
                              | optional,
                            httpCookie
                              | {
                                ttl
                                  | String
                                  | optional,
                                path
                                  | String
                                  | optional,
                                name
                                  | String,
                                ..
                              }
                              | optional,
                            ..
                          },
                          (
                            std.contract.all_of [
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      maglev = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      ringHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      httpQueryParameterName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      useSourceIp = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpCookie = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      httpHeaderName = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              ),
                            ]
                          )
                        ]
                      )
                      | optional,
                    ..
                  },
                  (
                    lib.contracts.OneOf [
                      lib.records.JsonObject
                        {
                          consistentHash = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      lib.records.JsonObject
                        {
                          simple = { contract = Dyn, optional = false, },
                        }
                        {}
                        true,
                      (
                        std.contract.not (
                          std.contract.any_of [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                          ]
                        )
                      ),
                    ]
                  )
                ]
              )
              | optional,
            connectionPool
              | {
                tcp
                  | {
                    tcpKeepalive
                      | {
                        time
                          | String
                          | optional,
                        probes
                          | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                          | optional,
                        interval
                          | String
                          | optional,
                        ..
                      }
                      | optional,
                    maxConnections
                      | std.number.Integer
                      | optional,
                    maxConnectionDuration
                      | String
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    connectTimeout
                      | String
                      | optional,
                    ..
                  }
                  | optional,
                http
                  | {
                    useClientProtocol
                      | Bool
                      | optional,
                    maxRetries
                      | std.number.Integer
                      | optional,
                    maxRequestsPerConnection
                      | std.number.Integer
                      | optional,
                    maxConcurrentStreams
                      | std.number.Integer
                      | optional,
                    idleTimeout
                      | String
                      | optional,
                    http2MaxRequests
                      | std.number.Integer
                      | optional,
                    http1MaxPendingRequests
                      | std.number.Integer
                      | optional,
                    h2UpgradePolicy
                      | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        subsets
          | (
            Array {
              trafficPolicy
                | {
                  tunnel
                    | {
                      targetPort
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ],
                      targetHost
                        | String,
                      protocol
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  tls
                    | {
                      subjectAltNames
                        | (Array String)
                        | optional,
                      sni
                        | String
                        | optional,
                      privateKey
                        | String
                        | optional,
                      mode
                        | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                        | optional,
                      insecureSkipVerify
                        | Bool
                        | optional,
                      credentialName
                        | String
                        | optional,
                      clientCertificate
                        | String
                        | optional,
                      caCrl
                        | String
                        | optional,
                      caCertificates
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  proxyProtocol
                    | {
                      version
                        | lib.enum.StringOrEnum [| '"V2", '"V1", |]
                        | optional,
                      ..
                    }
                    | optional,
                  portLevelSettings
                    | (
                      Array {
                        tls
                          | {
                            subjectAltNames
                              | (Array String)
                              | optional,
                            sni
                              | String
                              | optional,
                            privateKey
                              | String
                              | optional,
                            mode
                              | lib.enum.StringOrEnum [| '"ISTIO_MUTUAL", '"MUTUAL", '"SIMPLE", '"DISABLE", |]
                              | optional,
                            insecureSkipVerify
                              | Bool
                              | optional,
                            credentialName
                              | String
                              | optional,
                            clientCertificate
                              | String
                              | optional,
                            caCrl
                              | String
                              | optional,
                            caCertificates
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        port
                          | {
                            number
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            ..
                          }
                          | optional,
                        outlierDetection
                          | {
                            splitExternalLocalOriginErrors
                              | Bool
                              | optional,
                            minHealthPercent
                              | std.number.Integer
                              | optional,
                            maxEjectionPercent
                              | std.number.Integer
                              | optional,
                            interval
                              | String
                              | optional,
                            consecutiveLocalOriginFailures
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveGatewayErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            consecutiveErrors
                              | std.number.Integer
                              | optional,
                            consecutive5xxErrors
                              | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                              | optional,
                            baseEjectionTime
                              | String
                              | optional,
                            ..
                          }
                          | optional,
                        loadBalancer
                          | (
                            std.contract.all_of [
                              {
                                warmupDurationSecs
                                  | String
                                  | optional,
                                simple
                                  | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                                  | optional,
                                localityLbSetting
                                  | {
                                    failoverPriority
                                      | (Array String)
                                      | optional,
                                    failover
                                      | (
                                        Array {
                                          to
                                            | String
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    enabled
                                      | Bool
                                      | optional,
                                    distribute
                                      | (
                                        Array {
                                          to
                                            | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                            | optional,
                                          from
                                            | String
                                            | optional,
                                          ..
                                        }
                                      )
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                consistentHash
                                  | (
                                    std.contract.all_of [
                                      {
                                        useSourceIp
                                          | Bool
                                          | optional,
                                        ringHash
                                          | {
                                            minimumRingSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        minimumRingSize
                                          | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                          | optional,
                                        maglev
                                          | {
                                            tableSize
                                              | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                              | optional,
                                            ..
                                          }
                                          | optional,
                                        httpQueryParameterName
                                          | String
                                          | optional,
                                        httpHeaderName
                                          | String
                                          | optional,
                                        httpCookie
                                          | {
                                            ttl
                                              | String
                                              | optional,
                                            path
                                              | String
                                              | optional,
                                            name
                                              | String,
                                            ..
                                          }
                                          | optional,
                                        ..
                                      },
                                      (
                                        std.contract.all_of [
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        maglev = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        ringHash = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                          (
                                            lib.contracts.OneOf [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              (
                                                std.contract.not (
                                                  std.contract.any_of [
                                                    lib.records.JsonObject
                                                      {
                                                        httpQueryParameterName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        useSourceIp = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpCookie = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                    lib.records.JsonObject
                                                      {
                                                        httpHeaderName = { contract = Dyn, optional = false, },
                                                      }
                                                      {}
                                                      true,
                                                  ]
                                                )
                                              ),
                                            ]
                                          ),
                                        ]
                                      )
                                    ]
                                  )
                                  | optional,
                                ..
                              },
                              (
                                lib.contracts.OneOf [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  (
                                    std.contract.not (
                                      std.contract.any_of [
                                        lib.records.JsonObject
                                          {
                                            consistentHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            simple = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                      ]
                                    )
                                  ),
                                ]
                              )
                            ]
                          )
                          | optional,
                        connectionPool
                          | {
                            tcp
                              | {
                                tcpKeepalive
                                  | {
                                    time
                                      | String
                                      | optional,
                                    probes
                                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                      | optional,
                                    interval
                                      | String
                                      | optional,
                                    ..
                                  }
                                  | optional,
                                maxConnections
                                  | std.number.Integer
                                  | optional,
                                maxConnectionDuration
                                  | String
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                connectTimeout
                                  | String
                                  | optional,
                                ..
                              }
                              | optional,
                            http
                              | {
                                useClientProtocol
                                  | Bool
                                  | optional,
                                maxRetries
                                  | std.number.Integer
                                  | optional,
                                maxRequestsPerConnection
                                  | std.number.Integer
                                  | optional,
                                maxConcurrentStreams
                                  | std.number.Integer
                                  | optional,
                                idleTimeout
                                  | String
                                  | optional,
                                http2MaxRequests
                                  | std.number.Integer
                                  | optional,
                                http1MaxPendingRequests
                                  | std.number.Integer
                                  | optional,
                                h2UpgradePolicy
                                  | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                                  | optional,
                                ..
                              }
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      }
                    )
                    | lib.arrays.Length { max = 4096 }
                    | optional,
                  outlierDetection
                    | {
                      splitExternalLocalOriginErrors
                        | Bool
                        | optional,
                      minHealthPercent
                        | std.number.Integer
                        | optional,
                      maxEjectionPercent
                        | std.number.Integer
                        | optional,
                      interval
                        | String
                        | optional,
                      consecutiveLocalOriginFailures
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveGatewayErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      consecutiveErrors
                        | std.number.Integer
                        | optional,
                      consecutive5xxErrors
                        | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                        | optional,
                      baseEjectionTime
                        | String
                        | optional,
                      ..
                    }
                    | optional,
                  loadBalancer
                    | (
                      std.contract.all_of [
                        {
                          warmupDurationSecs
                            | String
                            | optional,
                          simple
                            | lib.enum.StringOrEnum [| '"LEAST_REQUEST", '"ROUND_ROBIN", '"PASSTHROUGH", '"RANDOM", '"LEAST_CONN", '"UNSPECIFIED", |]
                            | optional,
                          localityLbSetting
                            | {
                              failoverPriority
                                | (Array String)
                                | optional,
                              failover
                                | (
                                  Array {
                                    to
                                      | String
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              enabled
                                | Bool
                                | optional,
                              distribute
                                | (
                                  Array {
                                    to
                                      | { _ | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ] }
                                      | optional,
                                    from
                                      | String
                                      | optional,
                                    ..
                                  }
                                )
                                | optional,
                              ..
                            }
                            | optional,
                          consistentHash
                            | (
                              std.contract.all_of [
                                {
                                  useSourceIp
                                    | Bool
                                    | optional,
                                  ringHash
                                    | {
                                      minimumRingSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  minimumRingSize
                                    | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                    | optional,
                                  maglev
                                    | {
                                      tableSize
                                        | std.contract.all_of [std.number.Integer, lib.numbers.MinRange 0 false ]
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  httpQueryParameterName
                                    | String
                                    | optional,
                                  httpHeaderName
                                    | String
                                    | optional,
                                  httpCookie
                                    | {
                                      ttl
                                        | String
                                        | optional,
                                      path
                                        | String
                                        | optional,
                                      name
                                        | String,
                                      ..
                                    }
                                    | optional,
                                  ..
                                },
                                (
                                  std.contract.all_of [
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            maglev = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            ringHash = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  maglev = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  ringHash = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                    (
                                      lib.contracts.OneOf [
                                        lib.records.JsonObject
                                          {
                                            httpQueryParameterName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            useSourceIp = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpCookie = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        lib.records.JsonObject
                                          {
                                            httpHeaderName = { contract = Dyn, optional = false, },
                                          }
                                          {}
                                          true,
                                        (
                                          std.contract.not (
                                            std.contract.any_of [
                                              lib.records.JsonObject
                                                {
                                                  httpQueryParameterName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  useSourceIp = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpCookie = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                              lib.records.JsonObject
                                                {
                                                  httpHeaderName = { contract = Dyn, optional = false, },
                                                }
                                                {}
                                                true,
                                            ]
                                          )
                                        ),
                                      ]
                                    ),
                                  ]
                                )
                              ]
                            )
                            | optional,
                          ..
                        },
                        (
                          lib.contracts.OneOf [
                            lib.records.JsonObject
                              {
                                consistentHash = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            lib.records.JsonObject
                              {
                                simple = { contract = Dyn, optional = false, },
                              }
                              {}
                              true,
                            (
                              std.contract.not (
                                std.contract.any_of [
                                  lib.records.JsonObject
                                    {
                                      consistentHash = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                  lib.records.JsonObject
                                    {
                                      simple = { contract = Dyn, optional = false, },
                                    }
                                    {}
                                    true,
                                ]
                              )
                            ),
                          ]
                        )
                      ]
                    )
                    | optional,
                  connectionPool
                    | {
                      tcp
                        | {
                          tcpKeepalive
                            | {
                              time
                                | String
                                | optional,
                              probes
                                | std.contract.all_of [std.number.Integer, lib.numbers.InRange 0 false 4294967295 false ]
                                | optional,
                              interval
                                | String
                                | optional,
                              ..
                            }
                            | optional,
                          maxConnections
                            | std.number.Integer
                            | optional,
                          maxConnectionDuration
                            | String
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          connectTimeout
                            | String
                            | optional,
                          ..
                        }
                        | optional,
                      http
                        | {
                          useClientProtocol
                            | Bool
                            | optional,
                          maxRetries
                            | std.number.Integer
                            | optional,
                          maxRequestsPerConnection
                            | std.number.Integer
                            | optional,
                          maxConcurrentStreams
                            | std.number.Integer
                            | optional,
                          idleTimeout
                            | String
                            | optional,
                          http2MaxRequests
                            | std.number.Integer
                            | optional,
                          http1MaxPendingRequests
                            | std.number.Integer
                            | optional,
                          h2UpgradePolicy
                            | lib.enum.StringOrEnum [| '"UPGRADE", '"DO_NOT_UPGRADE", '"DEFAULT", |]
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              name
                | String,
              labels
                | { _ | String }
                | optional,
              ..
            }
          )
          | optional,
        host
          | String,
        exportTo
          | (Array String)
          | optional,
        ..
      }
      | optional,
    ..
  },
  extensions.istio.io.v1alpha1.wasmplugins = {
    status
      | {
        validationMessages
          | (
            Array {
              type
                | {
                  name
                    | String
                    | optional,
                  code
                    | String
                    | optional,
                  ..
                }
                | optional,
              level
                | lib.enum.StringOrEnum [| '"INFO", '"WARNING", '"ERROR", '"UNKNOWN", |]
                | optional,
              documentationUrl
                | String
                | optional,
              ..
            }
          )
          | optional,
        observedGeneration
          | (
            std.contract.any_of [
              String,
              std.number.Integer,
            ]
          )
          | optional,
        conditions
          | (
            Array {
              type
                | String
                | optional,
              status
                | String
                | optional,
              reason
                | String
                | optional,
              message
                | String
                | optional,
              lastTransitionTime
                | String
                | optional,
              lastProbeTime
                | String
                | optional,
              ..
            }
          )
          | optional,
        ..
      }
      | optional,
    spec
      | {
        vmConfig
          | {
            env
              | (
                Array {
                  valueFrom
                    | lib.enum.StringOrEnum [| '"HOST", '"INLINE", |]
                    | optional,
                  value
                    | std.contract.all_of [ String, lib.strings.MaxLength 2048]
                    | optional,
                  name
                    | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 256],
                  ..
                }
              )
              | lib.arrays.Length { max = 256 }
              | optional,
            ..
          }
          | optional,
        verificationKey
          | String
          | optional,
        url
          | std.contract.all_of [ String, lib.strings.MinLength 1],
        type
          | lib.enum.StringOrEnum [| '"NETWORK", '"HTTP", '"UNSPECIFIED_PLUGIN_TYPE", |]
          | optional,
        targetRefs
          | (
            Array {
              namespace
                | String
                | optional,
              name
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
              kind
                | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
              group
                | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
                | optional,
              ..
            }
          )
          | optional,
        targetRef
          | {
            namespace
              | String
              | optional,
            name
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253],
            kind
              | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 63, lib.strings.Regex "^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"],
            group
              | std.contract.all_of [ String, lib.strings.MaxLength 253, lib.strings.Regex "^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"]
              | optional,
            ..
          }
          | optional,
        sha256
          | std.contract.all_of [ String, lib.strings.Regex "(^$|^[a-f0-9]{64}$)"]
          | optional,
        selector
          | {
            matchLabels
              | { _ | std.contract.all_of [ String, lib.strings.MaxLength 63] }
              | optional,
            ..
          }
          | optional,
        priority
          | std.number.Integer
          | optional,
        pluginName
          | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 256]
          | optional,
        pluginConfig
          | {
            ..
          }
          | optional,
        phase
          | lib.enum.StringOrEnum [| '"STATS", '"AUTHZ", '"AUTHN", '"UNSPECIFIED_PHASE", |]
          | optional,
        "match"
          | (
            Array {
              ports
                | (
                  Array {
                    number
                      | std.contract.all_of [std.number.Integer, lib.numbers.InRange 1 false 65535 false ],
                    ..
                  }
                )
                | optional,
              mode
                | lib.enum.StringOrEnum [| '"CLIENT_AND_SERVER", '"SERVER", '"CLIENT", '"UNDEFINED", |]
                | optional,
              ..
            }
          )
          | optional,
        imagePullSecret
          | std.contract.all_of [ String, lib.strings.MinLength 1, lib.strings.MaxLength 253]
          | optional,
        imagePullPolicy
          | lib.enum.StringOrEnum [| '"Always", '"IfNotPresent", '"UNSPECIFIED_POLICY", |]
          | optional,
        failStrategy
          | lib.enum.StringOrEnum [| '"FAIL_OPEN", '"FAIL_CLOSE", |]
          | optional,
        ..
      },
    ..
  },
}
