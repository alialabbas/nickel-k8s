# DO NOT EDIT THIS FILE MANUALLY
# Auto Generated Contracts
let lib = import "Contracts.ncl" in
{
  apiregistration.k8s.io.v1.APIServiceList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apiregistration.k8s.io.v1.APIService = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storagemigration.k8s.io.v1alpha1.StorageVersionMigrationList = {

    items
      | (
        Array {

          status
            | {

              conditions
                | lib.FromListToMap "type"
                | optional,
              ..
            }
            | optional,
          metadata
            | {

              ownerReferences
                | lib.FromListToMap "uid"
                | optional,
              ..
            }
            | optional,
          ..
        }
      )
      | lib.FromListToMap "type",
    ..
  },
  storagemigration.k8s.io.v1alpha1.StorageVersionMigration = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1beta1.VolumeAttributesClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1beta1.VolumeAttributesClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1alpha1.VolumeAttributesClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1alpha1.VolumeAttributesClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1.VolumeAttachmentList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1.VolumeAttachment = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1.StorageClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1.StorageClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1.CSIStorageCapacityList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1.CSIStorageCapacity = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1.CSINodeList = {

    items
      | {

        spec
          | {

            drivers
              | lib.FromListToMap "name",
            ..
          },
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1.CSINode = {

    spec
      | {

        drivers
          | lib.FromListToMap "name",
        ..
      },
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  storage.k8s.io.v1.CSIDriverList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  storage.k8s.io.v1.CSIDriver = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  scheduling.k8s.io.v1.PriorityClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  scheduling.k8s.io.v1.PriorityClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  resource.k8s.io.v1alpha3.ResourceSliceList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  resource.k8s.io.v1alpha3.ResourceSlice = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  resource.k8s.io.v1alpha3.ResourceClaimTemplateList = {

    items
      | {

        spec
          | {

            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  resource.k8s.io.v1alpha3.ResourceClaimTemplate = {

    spec
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  resource.k8s.io.v1alpha3.ResourceClaimList = {

    items
      | {

        status
          | {

            reservedFor
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  resource.k8s.io.v1alpha3.ResourceClaim = {

    status
      | {

        reservedFor
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  resource.k8s.io.v1alpha3.PodSchedulingContextList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  resource.k8s.io.v1alpha3.PodSchedulingContext = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  resource.k8s.io.v1alpha3.DeviceClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  resource.k8s.io.v1alpha3.DeviceClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  rbac.authorization.k8s.io.v1.RoleList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  rbac.authorization.k8s.io.v1.RoleBindingList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  rbac.authorization.k8s.io.v1.RoleBinding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  rbac.authorization.k8s.io.v1.Role = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  rbac.authorization.k8s.io.v1.ClusterRoleList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  rbac.authorization.k8s.io.v1.ClusterRoleBindingList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  rbac.authorization.k8s.io.v1.ClusterRoleBinding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  rbac.authorization.k8s.io.v1.ClusterRole = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  policy.v1.PodDisruptionBudgetList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  policy.v1.PodDisruptionBudget = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  policy.v1.Eviction = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  node.k8s.io.v1.RuntimeClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  node.k8s.io.v1.RuntimeClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.k8s.io.v1beta1.ServiceCIDRList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  networking.k8s.io.v1beta1.ServiceCIDR = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.k8s.io.v1beta1.IPAddressList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  networking.k8s.io.v1beta1.IPAddress = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.k8s.io.v1.NetworkPolicyList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  networking.k8s.io.v1.NetworkPolicy = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.k8s.io.v1.IngressList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  networking.k8s.io.v1.IngressClassList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  networking.k8s.io.v1.IngressClass = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  networking.k8s.io.v1.Ingress = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  flowcontrol.apiserver.k8s.io.v1beta3.PriorityLevelConfigurationList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  flowcontrol.apiserver.k8s.io.v1beta3.PriorityLevelConfiguration = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  flowcontrol.apiserver.k8s.io.v1beta3.FlowSchemaList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  flowcontrol.apiserver.k8s.io.v1beta3.FlowSchema = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  flowcontrol.apiserver.k8s.io.v1.PriorityLevelConfigurationList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  flowcontrol.apiserver.k8s.io.v1.PriorityLevelConfiguration = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  flowcontrol.apiserver.k8s.io.v1.FlowSchemaList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  flowcontrol.apiserver.k8s.io.v1.FlowSchema = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  events.k8s.io.v1.EventList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  events.k8s.io.v1.Event = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  discovery.k8s.io.v1.EndpointSliceList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  discovery.k8s.io.v1.EndpointSlice = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.ServiceList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            ports
              | lib.FromListToMap "port"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.ServiceAccountList = {

    items
      | {

        secrets
          | lib.FromListToMap "name"
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.ServiceAccount = {

    secrets
      | lib.FromListToMap "name"
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.Service = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        ports
          | lib.FromListToMap "port"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.SecretList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.Secret = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.ResourceQuotaList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.ResourceQuota = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.ReplicationControllerList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.ReplicationController = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.PodTemplateList = {

    items
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.PodTemplate = {

    template
      | {

        spec
          | {

            volumes
              | (
                Array {

                  ephemeral
                    | {

                      volumeClaimTemplate
                        | {

                          metadata
                            | {

                              ownerReferences
                                | lib.FromListToMap "uid"
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            topologySpreadConstraints
              | lib.FromListToMap "topologyKey"
              | optional,
            schedulingGates
              | lib.FromListToMap "name"
              | optional,
            resourceClaims
              | lib.FromListToMap "name"
              | optional,
            initContainers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            imagePullSecrets
              | lib.FromListToMap "name"
              | optional,
            hostAliases
              | lib.FromListToMap "ip"
              | optional,
            ephemeralContainers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            containers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name",
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.PodList = {

    items
      | {

        status
          | {

            resourceClaimStatuses
              | lib.FromListToMap "name"
              | optional,
            podIPs
              | lib.FromListToMap "ip"
              | optional,
            initContainerStatuses
              | {

                volumeMounts
                  | lib.FromListToMap "mountPath"
                  | optional,
                allocatedResourcesStatus
                  | lib.FromListToMap "name"
                  | optional,
                ..
              }
              | optional,
            hostIPs
              | lib.FromListToMap "ip"
              | optional,
            ephemeralContainerStatuses
              | {

                volumeMounts
                  | lib.FromListToMap "mountPath"
                  | optional,
                allocatedResourcesStatus
                  | lib.FromListToMap "name"
                  | optional,
                ..
              }
              | optional,
            containerStatuses
              | {

                volumeMounts
                  | lib.FromListToMap "mountPath"
                  | optional,
                allocatedResourcesStatus
                  | lib.FromListToMap "name"
                  | optional,
                ..
              }
              | optional,
            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            volumes
              | (
                Array {

                  ephemeral
                    | {

                      volumeClaimTemplate
                        | {

                          metadata
                            | {

                              ownerReferences
                                | lib.FromListToMap "uid"
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            topologySpreadConstraints
              | lib.FromListToMap "topologyKey"
              | optional,
            schedulingGates
              | lib.FromListToMap "name"
              | optional,
            resourceClaims
              | lib.FromListToMap "name"
              | optional,
            initContainers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            imagePullSecrets
              | lib.FromListToMap "name"
              | optional,
            hostAliases
              | lib.FromListToMap "ip"
              | optional,
            ephemeralContainers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name"
              | optional,
            containers
              | (
                Array {

                  volumeMounts
                    | lib.FromListToMap "mountPath"
                    | optional,
                  volumeDevices
                    | lib.FromListToMap "devicePath"
                    | optional,
                  ports
                    | lib.FromListToMap "containerPort"
                    | optional,
                  env
                    | lib.FromListToMap "name"
                    | optional,
                  ..
                }
              )
              | lib.FromListToMap "name",
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.Pod = {

    status
      | {

        resourceClaimStatuses
          | lib.FromListToMap "name"
          | optional,
        podIPs
          | lib.FromListToMap "ip"
          | optional,
        initContainerStatuses
          | {

            volumeMounts
              | lib.FromListToMap "mountPath"
              | optional,
            allocatedResourcesStatus
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        hostIPs
          | lib.FromListToMap "ip"
          | optional,
        ephemeralContainerStatuses
          | {

            volumeMounts
              | lib.FromListToMap "mountPath"
              | optional,
            allocatedResourcesStatus
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        containerStatuses
          | {

            volumeMounts
              | lib.FromListToMap "mountPath"
              | optional,
            allocatedResourcesStatus
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        volumes
          | (
            Array {

              ephemeral
                | {

                  volumeClaimTemplate
                    | {

                      metadata
                        | {

                          ownerReferences
                            | lib.FromListToMap "uid"
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                    | optional,
                  ..
                }
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name"
          | optional,
        topologySpreadConstraints
          | lib.FromListToMap "topologyKey"
          | optional,
        schedulingGates
          | lib.FromListToMap "name"
          | optional,
        resourceClaims
          | lib.FromListToMap "name"
          | optional,
        initContainers
          | (
            Array {

              volumeMounts
                | lib.FromListToMap "mountPath"
                | optional,
              volumeDevices
                | lib.FromListToMap "devicePath"
                | optional,
              ports
                | lib.FromListToMap "containerPort"
                | optional,
              env
                | lib.FromListToMap "name"
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name"
          | optional,
        imagePullSecrets
          | lib.FromListToMap "name"
          | optional,
        hostAliases
          | lib.FromListToMap "ip"
          | optional,
        ephemeralContainers
          | (
            Array {

              volumeMounts
                | lib.FromListToMap "mountPath"
                | optional,
              volumeDevices
                | lib.FromListToMap "devicePath"
                | optional,
              ports
                | lib.FromListToMap "containerPort"
                | optional,
              env
                | lib.FromListToMap "name"
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name"
          | optional,
        containers
          | (
            Array {

              volumeMounts
                | lib.FromListToMap "mountPath"
                | optional,
              volumeDevices
                | lib.FromListToMap "devicePath"
                | optional,
              ports
                | lib.FromListToMap "containerPort"
                | optional,
              env
                | lib.FromListToMap "name"
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name",
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.PersistentVolumeList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.PersistentVolumeClaimList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.PersistentVolumeClaim = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.PersistentVolume = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.NodeList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            addresses
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.Node = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        addresses
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.NamespaceList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.Namespace = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.LimitRangeList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.LimitRange = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.EventList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          },
        ..
      },
    ..
  },
  v1.Event = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      },
    ..
  },
  v1.EndpointsList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.Endpoints = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.ConfigMapList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  v1.ConfigMap = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  v1.ComponentStatusList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      },
    ..
  },
  v1.ComponentStatus = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    conditions
      | lib.FromListToMap "type"
      | optional,
    ..
  },
  v1.Binding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  coordination.k8s.io.v1alpha1.LeaseCandidateList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  coordination.k8s.io.v1alpha1.LeaseCandidate = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  coordination.k8s.io.v1.LeaseList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  coordination.k8s.io.v1.Lease = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  certificates.k8s.io.v1alpha1.ClusterTrustBundleList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  certificates.k8s.io.v1alpha1.ClusterTrustBundle = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  certificates.k8s.io.v1.CertificateSigningRequestList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  certificates.k8s.io.v1.CertificateSigningRequest = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  batch.v1.JobList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  batch.v1.Job = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  batch.v1.CronJobList = {

    items
      | {

        spec
          | {

            jobTemplate
              | {

                spec
                  | {

                    template
                      | {

                        spec
                          | {

                            volumes
                              | (
                                Array {

                                  ephemeral
                                    | {

                                      volumeClaimTemplate
                                        | {

                                          metadata
                                            | {

                                              ownerReferences
                                                | lib.FromListToMap "uid"
                                                | optional,
                                              ..
                                            }
                                            | optional,
                                          ..
                                        }
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                              )
                              | lib.FromListToMap "name"
                              | optional,
                            topologySpreadConstraints
                              | lib.FromListToMap "topologyKey"
                              | optional,
                            schedulingGates
                              | lib.FromListToMap "name"
                              | optional,
                            resourceClaims
                              | lib.FromListToMap "name"
                              | optional,
                            initContainers
                              | (
                                Array {

                                  volumeMounts
                                    | lib.FromListToMap "mountPath"
                                    | optional,
                                  volumeDevices
                                    | lib.FromListToMap "devicePath"
                                    | optional,
                                  ports
                                    | lib.FromListToMap "containerPort"
                                    | optional,
                                  env
                                    | lib.FromListToMap "name"
                                    | optional,
                                  ..
                                }
                              )
                              | lib.FromListToMap "name"
                              | optional,
                            imagePullSecrets
                              | lib.FromListToMap "name"
                              | optional,
                            hostAliases
                              | lib.FromListToMap "ip"
                              | optional,
                            ephemeralContainers
                              | (
                                Array {

                                  volumeMounts
                                    | lib.FromListToMap "mountPath"
                                    | optional,
                                  volumeDevices
                                    | lib.FromListToMap "devicePath"
                                    | optional,
                                  ports
                                    | lib.FromListToMap "containerPort"
                                    | optional,
                                  env
                                    | lib.FromListToMap "name"
                                    | optional,
                                  ..
                                }
                              )
                              | lib.FromListToMap "name"
                              | optional,
                            containers
                              | (
                                Array {

                                  volumeMounts
                                    | lib.FromListToMap "mountPath"
                                    | optional,
                                  volumeDevices
                                    | lib.FromListToMap "devicePath"
                                    | optional,
                                  ports
                                    | lib.FromListToMap "containerPort"
                                    | optional,
                                  env
                                    | lib.FromListToMap "name"
                                    | optional,
                                  ..
                                }
                              )
                              | lib.FromListToMap "name",
                            ..
                          }
                          | optional,
                        metadata
                          | {

                            ownerReferences
                              | lib.FromListToMap "uid"
                              | optional,
                            ..
                          }
                          | optional,
                        ..
                      },
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  batch.v1.CronJob = {

    spec
      | {

        jobTemplate
          | {

            spec
              | {

                template
                  | {

                    spec
                      | {

                        volumes
                          | (
                            Array {

                              ephemeral
                                | {

                                  volumeClaimTemplate
                                    | {

                                      metadata
                                        | {

                                          ownerReferences
                                            | lib.FromListToMap "uid"
                                            | optional,
                                          ..
                                        }
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                          )
                          | lib.FromListToMap "name"
                          | optional,
                        topologySpreadConstraints
                          | lib.FromListToMap "topologyKey"
                          | optional,
                        schedulingGates
                          | lib.FromListToMap "name"
                          | optional,
                        resourceClaims
                          | lib.FromListToMap "name"
                          | optional,
                        initContainers
                          | (
                            Array {

                              volumeMounts
                                | lib.FromListToMap "mountPath"
                                | optional,
                              volumeDevices
                                | lib.FromListToMap "devicePath"
                                | optional,
                              ports
                                | lib.FromListToMap "containerPort"
                                | optional,
                              env
                                | lib.FromListToMap "name"
                                | optional,
                              ..
                            }
                          )
                          | lib.FromListToMap "name"
                          | optional,
                        imagePullSecrets
                          | lib.FromListToMap "name"
                          | optional,
                        hostAliases
                          | lib.FromListToMap "ip"
                          | optional,
                        ephemeralContainers
                          | (
                            Array {

                              volumeMounts
                                | lib.FromListToMap "mountPath"
                                | optional,
                              volumeDevices
                                | lib.FromListToMap "devicePath"
                                | optional,
                              ports
                                | lib.FromListToMap "containerPort"
                                | optional,
                              env
                                | lib.FromListToMap "name"
                                | optional,
                              ..
                            }
                          )
                          | lib.FromListToMap "name"
                          | optional,
                        containers
                          | (
                            Array {

                              volumeMounts
                                | lib.FromListToMap "mountPath"
                                | optional,
                              volumeDevices
                                | lib.FromListToMap "devicePath"
                                | optional,
                              ports
                                | lib.FromListToMap "containerPort"
                                | optional,
                              env
                                | lib.FromListToMap "name"
                                | optional,
                              ..
                            }
                          )
                          | lib.FromListToMap "name",
                        ..
                      }
                      | optional,
                    metadata
                      | {

                        ownerReferences
                          | lib.FromListToMap "uid"
                          | optional,
                        ..
                      }
                      | optional,
                    ..
                  },
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  autoscaling.v2.HorizontalPodAutoscalerList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  autoscaling.v2.HorizontalPodAutoscaler = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  autoscaling.v1.Scale = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  autoscaling.v1.HorizontalPodAutoscalerList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  autoscaling.v1.HorizontalPodAutoscaler = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authorization.k8s.io.v1.SubjectAccessReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authorization.k8s.io.v1.SelfSubjectRulesReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authorization.k8s.io.v1.SelfSubjectAccessReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authorization.k8s.io.v1.LocalSubjectAccessReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authentication.k8s.io.v1beta1.SelfSubjectReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authentication.k8s.io.v1alpha1.SelfSubjectReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authentication.k8s.io.v1.TokenReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authentication.k8s.io.v1.TokenRequest = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  authentication.k8s.io.v1.SelfSubjectReview = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  apps.v1.StatefulSetList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            volumeClaimTemplates
              | {

                status
                  | {

                    conditions
                      | lib.FromListToMap "type"
                      | optional,
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apps.v1.StatefulSet = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        volumeClaimTemplates
          | {

            status
              | {

                conditions
                  | lib.FromListToMap "type"
                  | optional,
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  apps.v1.ReplicaSetList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apps.v1.ReplicaSet = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          }
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  apps.v1.DeploymentList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apps.v1.Deployment = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  apps.v1.DaemonSetList = {

    items
      | {

        status
          | {

            conditions
              | lib.FromListToMap "type"
              | optional,
            ..
          }
          | optional,
        spec
          | {

            template
              | {

                spec
                  | {

                    volumes
                      | (
                        Array {

                          ephemeral
                            | {

                              volumeClaimTemplate
                                | {

                                  metadata
                                    | {

                                      ownerReferences
                                        | lib.FromListToMap "uid"
                                        | optional,
                                      ..
                                    }
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    topologySpreadConstraints
                      | lib.FromListToMap "topologyKey"
                      | optional,
                    schedulingGates
                      | lib.FromListToMap "name"
                      | optional,
                    resourceClaims
                      | lib.FromListToMap "name"
                      | optional,
                    initContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    imagePullSecrets
                      | lib.FromListToMap "name"
                      | optional,
                    hostAliases
                      | lib.FromListToMap "ip"
                      | optional,
                    ephemeralContainers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name"
                      | optional,
                    containers
                      | (
                        Array {

                          volumeMounts
                            | lib.FromListToMap "mountPath"
                            | optional,
                          volumeDevices
                            | lib.FromListToMap "devicePath"
                            | optional,
                          ports
                            | lib.FromListToMap "containerPort"
                            | optional,
                          env
                            | lib.FromListToMap "name"
                            | optional,
                          ..
                        }
                      )
                      | lib.FromListToMap "name",
                    ..
                  }
                  | optional,
                metadata
                  | {

                    ownerReferences
                      | lib.FromListToMap "uid"
                      | optional,
                    ..
                  }
                  | optional,
                ..
              },
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apps.v1.DaemonSet = {

    status
      | {

        conditions
          | lib.FromListToMap "type"
          | optional,
        ..
      }
      | optional,
    spec
      | {

        template
          | {

            spec
              | {

                volumes
                  | (
                    Array {

                      ephemeral
                        | {

                          volumeClaimTemplate
                            | {

                              metadata
                                | {

                                  ownerReferences
                                    | lib.FromListToMap "uid"
                                    | optional,
                                  ..
                                }
                                | optional,
                              ..
                            }
                            | optional,
                          ..
                        }
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                topologySpreadConstraints
                  | lib.FromListToMap "topologyKey"
                  | optional,
                schedulingGates
                  | lib.FromListToMap "name"
                  | optional,
                resourceClaims
                  | lib.FromListToMap "name"
                  | optional,
                initContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                imagePullSecrets
                  | lib.FromListToMap "name"
                  | optional,
                hostAliases
                  | lib.FromListToMap "ip"
                  | optional,
                ephemeralContainers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name"
                  | optional,
                containers
                  | (
                    Array {

                      volumeMounts
                        | lib.FromListToMap "mountPath"
                        | optional,
                      volumeDevices
                        | lib.FromListToMap "devicePath"
                        | optional,
                      ports
                        | lib.FromListToMap "containerPort"
                        | optional,
                      env
                        | lib.FromListToMap "name"
                        | optional,
                      ..
                    }
                  )
                  | lib.FromListToMap "name",
                ..
              }
              | optional,
            metadata
              | {

                ownerReferences
                  | lib.FromListToMap "uid"
                  | optional,
                ..
              }
              | optional,
            ..
          },
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  apps.v1.ControllerRevisionList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  apps.v1.ControllerRevision = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  internal.apiserver.k8s.io.v1alpha1.StorageVersionList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  internal.apiserver.k8s.io.v1alpha1.StorageVersion = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyList = {

    items
      | {

        spec
          | {

            variables
              | lib.FromListToMap "name"
              | optional,
            matchConditions
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBindingList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy = {

    spec
      | {

        variables
          | lib.FromListToMap "name"
          | optional,
        matchConditions
          | lib.FromListToMap "name"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyList = {

    items
      | {

        spec
          | {

            variables
              | lib.FromListToMap "name"
              | optional,
            matchConditions
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBindingList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy = {

    spec
      | {

        variables
          | lib.FromListToMap "name"
          | optional,
        matchConditions
          | lib.FromListToMap "name"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingWebhookConfigurationList = {

    items
      | {

        webhooks
          | (
            Array {

              matchConditions
                | lib.FromListToMap "name"
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name"
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration = {

    webhooks
      | (
        Array {

          matchConditions
            | lib.FromListToMap "name"
            | optional,
          ..
        }
      )
      | lib.FromListToMap "name"
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyList = {

    items
      | {

        spec
          | {

            variables
              | lib.FromListToMap "name"
              | optional,
            matchConditions
              | lib.FromListToMap "name"
              | optional,
            ..
          }
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBindingList = {

    items
      | {

        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding = {

    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy = {

    spec
      | {

        variables
          | lib.FromListToMap "name"
          | optional,
        matchConditions
          | lib.FromListToMap "name"
          | optional,
        ..
      }
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
  admissionregistration.k8s.io.v1.MutatingWebhookConfigurationList = {

    items
      | {

        webhooks
          | (
            Array {

              matchConditions
                | lib.FromListToMap "name"
                | optional,
              ..
            }
          )
          | lib.FromListToMap "name"
          | optional,
        metadata
          | {

            ownerReferences
              | lib.FromListToMap "uid"
              | optional,
            ..
          }
          | optional,
        ..
      },
    ..
  },
  admissionregistration.k8s.io.v1.MutatingWebhookConfiguration = {

    webhooks
      | (
        Array {

          matchConditions
            | lib.FromListToMap "name"
            | optional,
          ..
        }
      )
      | lib.FromListToMap "name"
      | optional,
    metadata
      | {

        ownerReferences
          | lib.FromListToMap "uid"
          | optional,
        ..
      }
      | optional,
    ..
  },
}
