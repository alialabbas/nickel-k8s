# DO NOT EDIT THIS FILE MANUALLY
# Auto Generated Contracts
let lib = import "lib.ncl" in
{
  "apiregistration.k8s.io".v1.APIServiceList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apiregistration.k8s.io".v1.APIService = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.WatchEvent = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.Status = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.DeleteOptions = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.APIVersions = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.APIResourceList = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.APIGroupList = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  v1.APIGroup = {
    to_merge_form = fun value =>
      let result = value in

      result,
    from_merge_form = fun value =>
      let result = value in

      result,
  },
  "storagemigration.k8s.io".v1alpha1.StorageVersionMigrationList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["items", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["items", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["items", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["items", e, "metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["items", e, "status.conditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "type" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["items", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["items", e, "metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["items", e, "status.conditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "type" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["items", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["items", ] val_map result in

      result,
  },
  "storagemigration.k8s.io".v1alpha1.StorageVersionMigration = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "storage.k8s.io".v1alpha1.VolumeAttributesClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1alpha1.VolumeAttributesClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.VolumeAttachmentList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.VolumeAttachment = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.StorageClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.StorageClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSIStorageCapacityList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSIStorageCapacity = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSINodeList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "drivers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "drivers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "drivers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "drivers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "drivers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "drivers", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSINode = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "drivers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "drivers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "drivers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "drivers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "drivers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "drivers", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSIDriverList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "storage.k8s.io".v1.CSIDriver = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "scheduling.k8s.io".v1.PriorityClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "scheduling.k8s.io".v1.PriorityClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceSliceList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceSlice = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClassParametersList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClassParameters = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaimTemplateList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaimTemplate = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaimParametersList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaimParameters = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaimList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "reservedFor", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "reservedFor", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "reservedFor", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "reservedFor", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "reservedFor", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "reservedFor", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.ResourceClaim = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "reservedFor", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "reservedFor", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "reservedFor", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "reservedFor", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "reservedFor", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "reservedFor", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.PodSchedulingContextList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaims", ] val_map result in

      result,
  },
  "resource.k8s.io".v1alpha2.PodSchedulingContext = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaims", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.RoleList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.RoleBindingList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.RoleBinding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.Role = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.ClusterRoleList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.ClusterRoleBindingList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.ClusterRoleBinding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "rbac.authorization.k8s.io".v1.ClusterRole = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "policy".v1.PodDisruptionBudgetList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "policy".v1.PodDisruptionBudget = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "policy".v1.Eviction = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "node.k8s.io".v1.RuntimeClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "node.k8s.io".v1.RuntimeClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1alpha1.ServiceCIDRList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "networking.k8s.io".v1alpha1.ServiceCIDR = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "networking.k8s.io".v1alpha1.IPAddressList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1alpha1.IPAddress = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.NetworkPolicyList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.NetworkPolicy = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.IngressList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.IngressClassList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.IngressClass = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "networking.k8s.io".v1.Ingress = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1beta3.PriorityLevelConfigurationList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1beta3.PriorityLevelConfiguration = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1beta3.FlowSchemaList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1beta3.FlowSchema = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1.PriorityLevelConfigurationList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1.PriorityLevelConfiguration = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1.FlowSchemaList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "flowcontrol.apiserver.k8s.io".v1.FlowSchema = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "events.k8s.io".v1.EventList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "events.k8s.io".v1.Event = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "discovery.k8s.io".v1.EndpointSliceList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "discovery.k8s.io".v1.EndpointSlice = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ServiceList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ports", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ports", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ports", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ports", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ports", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ports", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.ServiceAccountList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["secrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["secrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["secrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["secrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["secrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["secrets", ] val_map result in

      result,
  },
  v1.ServiceAccount = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["secrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["secrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["secrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["secrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["secrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["secrets", ] val_map result in

      result,
  },
  v1.Service = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ports", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ports", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ports", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ports", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ports", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ports", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.SecretList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.Secret = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ResourceQuotaList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ResourceQuota = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ReplicationControllerList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.ReplicationController = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.PodTemplateList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "containers", ] val_map result in

      result,
  },
  v1.PodTemplate = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["template", "spec", "containers", ] val_map result in

      result,
  },
  v1.PodList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaimStatuses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "podIPs", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "podIPs", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "podIPs", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaimStatuses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "podIPs", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "podIPs", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "podIPs", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.Pod = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaimStatuses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "podIPs", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "podIPs", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "podIPs", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "containerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "containerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "ephemeralContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "resources", "claims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "initContainerStatuses", "volumeMounts", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "resourceClaimStatuses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "resourceClaimStatuses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "podIPs", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "podIPs", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "podIPs", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.PersistentVolumeList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.PersistentVolumeClaimList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.PersistentVolumeClaim = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.PersistentVolume = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.NodeList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "addresses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "addresses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "addresses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "addresses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "addresses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "addresses", ] val_map result in

      result,
  },
  v1.Node = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "addresses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "addresses", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "addresses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "addresses", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "addresses", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "addresses", ] val_map result in

      result,
  },
  v1.NamespaceList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.Namespace = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  v1.LimitRangeList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.LimitRange = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.EventList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.Event = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.EndpointsList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.Endpoints = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ConfigMapList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ConfigMap = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  v1.ComponentStatusList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["conditions", ] val_map result in

      result,
  },
  v1.ComponentStatus = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["conditions", ] val_map result in

      result,
  },
  v1.Binding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "coordination.k8s.io".v1.LeaseList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "coordination.k8s.io".v1.Lease = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "certificates.k8s.io".v1alpha1.ClusterTrustBundleList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "certificates.k8s.io".v1alpha1.ClusterTrustBundle = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "certificates.k8s.io".v1.CertificateSigningRequestList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "certificates.k8s.io".v1.CertificateSigningRequest = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "batch".v1.JobList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in

      result,
  },
  "batch".v1.Job = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in

      result,
  },
  "batch".v1.CronJobList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] val_map result in

      result,
  },
  "batch".v1.CronJob = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "jobTemplate", "spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "jobTemplate", "spec", "template", "spec", "containers", ] val_map result in

      result,
  },
  "autoscaling".v2.HorizontalPodAutoscalerList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "autoscaling".v2.HorizontalPodAutoscaler = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "autoscaling".v1.Scale = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "autoscaling".v1.HorizontalPodAutoscalerList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "autoscaling".v1.HorizontalPodAutoscaler = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authorization.k8s.io".v1.SubjectAccessReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authorization.k8s.io".v1.SelfSubjectRulesReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authorization.k8s.io".v1.SelfSubjectAccessReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authorization.k8s.io".v1.LocalSubjectAccessReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authentication.k8s.io".v1beta1.SelfSubjectReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authentication.k8s.io".v1alpha1.SelfSubjectReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authentication.k8s.io".v1.TokenReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authentication.k8s.io".v1.TokenRequest = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "authentication.k8s.io".v1.SelfSubjectReview = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "apps".v1.StatefulSetList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.StatefulSet = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "volumeClaimTemplates", "status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.ReplicaSetList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.ReplicaSet = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.DeploymentList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.Deployment = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.DaemonSetList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.DaemonSet = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "volumes", e, "ephemeral.volumeClaimTemplate.metadata.ownerReferences", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "uid" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "volumes", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "volumes", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "topologySpreadConstraints", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "schedulingGates", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "schedulingGates", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "resourceClaims", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "resourceClaims", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "initContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "initContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "initContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "imagePullSecrets", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "template", "spec", "hostAliases", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "hostAliases", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "ephemeralContainers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "ephemeralContainers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "resources.claims", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeMounts", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "mountPath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "volumeDevices", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "devicePath" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "ports", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "containerPort" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["spec", "template", "spec", "containers", e, "env", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["spec", "template", "spec", "containers", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "template", "spec", "containers", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "apps".v1.ControllerRevisionList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "apps".v1.ControllerRevision = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "internal.apiserver.k8s.io".v1alpha1.StorageVersionList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "storageVersions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "storageVersions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "storageVersions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "storageVersions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "storageVersions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "storageVersions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "internal.apiserver.k8s.io".v1alpha1.StorageVersion = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "storageVersions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "storageVersions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "storageVersions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "storageVersions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "storageVersions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "storageVersions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1beta1.ValidatingAdmissionPolicyList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1beta1.ValidatingAdmissionPolicyBindingList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1beta1.ValidatingAdmissionPolicyBinding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1beta1.ValidatingAdmissionPolicy = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1alpha1.ValidatingAdmissionPolicyList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1alpha1.ValidatingAdmissionPolicyBindingList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1alpha1.ValidatingAdmissionPolicyBinding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1alpha1.ValidatingAdmissionPolicy = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingWebhookConfigurationList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingWebhookConfiguration = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingAdmissionPolicyList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingAdmissionPolicyBindingList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingAdmissionPolicyBinding = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.ValidatingAdmissionPolicy = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "variables", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "variables", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "variables", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["spec", "matchConditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["spec", "matchConditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["spec", "matchConditions", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["status", "conditions", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["status", "conditions", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["status", "conditions", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.MutatingWebhookConfigurationList = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in

      result,
  },
  "admissionregistration.k8s.io".v1.MutatingWebhookConfiguration = {
    to_merge_form = fun value =>
      let result = value in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_list_to_map "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_list_to_map "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in

      result,
    from_merge_form = fun value =>
      let result = value in

      let inner =
        lib.records.get_value_at_path ["metadata", "ownerReferences", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let val = lib.records.get_value_at_path ["metadata", "ownerReferences", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["metadata", "ownerReferences", ] val_map result in
      let inner =
        lib.records.get_value_at_path ["webhooks", ] result
        |> match {
          'Found val => val,
          _ => {}
        }
      in

      let result =
        std.array.fold_right
          (fun e acc =>
            let path = ["webhooks", e, "matchConditions", ] in
            let value = lib.records.get_value_at_path path result in
            let value_map =
              value
              |> match {
                'Found val => lib.k8s.from_map_to_list "name" val,
                _ => value
              }
            in
            lib.records.update_value_at_path path value_map acc
          )
          result
          (std.record.fields inner)
      in
      let val = lib.records.get_value_at_path ["webhooks", ] result in
      let val_map =
        val
        |> match {
          'Found val => lib.k8s.from_map_to_list "name" val,
          _ => val
        }
      in
      let result = lib.records.update_value_at_path ["webhooks", ] val_map result in

      result,
  },
}
