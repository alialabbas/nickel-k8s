# Reflection support for Go types to suppoert reading these types and converting them to Nickel contracts.
# This will be the only way when there is no schema at all
# What is config-descriptor from mimir, why it doesn't exist for Loki, Tempo
# So maybe the goal for this is to do reflection based generation for each language
# Basically if you already generate a schema, here is one.
# If not here is a reflection approach, C# can load assemblies on the fly so it is easy to build a simple CLI to load assemblies and parse defined types from config
# Go on the other hand, who knows.
# Python, LOL but if their metadata includes the type annotation it can be done
# Rust should be possible as well and at that point the author should just do it
# Rust should technically just have a first class support, meaning a rust app should just integrate nickel and setup their contracts
# Same thing with other language honestly especially when you just need to load types
overrides: {}
multi_kv_config:
    primary: ""
    mirror_enabled: null
ingester_stream_chunks_when_using_blocks: null
ingester_limits: null
distributor_limits: null
